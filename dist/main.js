(()=>{"use strict";function e(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,l=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=l,pageTitle.dataset.catId=e.dataset.catId}function l(e,n){document.querySelectorAll(".taskContainerDiv").forEach((l=>{const o=function(e){for(const t of J){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(l.querySelector(".taskDiv").dataset.taskId),s=new Date(t(o.dueDate));s.setHours(0,0,0,0);const a=o.category;!(null===e||s<=e)||"All Inbox"!==n&&a.name!==n?l.style.display="none":l.style.display="block"}))}const o=document.querySelector(".content"),s=document.querySelector("nav"),a=document.querySelector("#modal"),d=document.querySelector("#catModal"),i=document.querySelector(".tasksContainer"),c=document.getElementById("collapseBtn"),r=document.querySelector(".sortOptions"),u=document.getElementById("sortBtn"),m=(document.getElementById("dateBtn"),document.getElementById("importanceBtn"),document.getElementById("createTask")),g=document.getElementById("okTaskBtn"),y=document.getElementById("cancelTaskBtn"),p=document.getElementById("delete"),k=document.getElementById("newCatBtn"),v=document.getElementById("okCatBtn"),E=document.getElementById("cancelCatBtn"),f=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),I=document.getElementById("colorDisplay"),h=document.getElementById("allBtn"),C=document.getElementById("todayBtn"),B=document.getElementById("thisWeekBtn"),L=document.getElementById("thisMonthBtn"),b=document.getElementById("pageTimeline");let x=document.getElementsByClassName("close")[0],D=document.getElementsByClassName("closeCatModal")[0],w=document.querySelector("form"),T=document.getElementById("pageTitle"),S=document.getElementById("title"),q=document.getElementById("category"),M=document.getElementById("dueDate"),A=document.getElementById("priority"),F=document.getElementById("description"),N=document.querySelectorAll(".catBtns"),P=document.querySelectorAll(".timelineBtns"),$="All Inbox",H=document.getElementById($),z=null,W=document.getElementById("allBtn");const R=function(){const e=new Date;return e.setHours(0,0,0,0),e}();function O(e){return N.forEach((e=>{e.classList.remove("selectedFilter")})),H=document.getElementById(e),H.classList.add("selectedFilter"),n(H),l(z,e),H}function Y(e,t){return console.log(t),P.forEach((e=>{e.classList.remove("selectedFilter")})),n(H),l(e,$),t.classList.add("selectedFilter"),t}u.addEventListener("click",(function(){"none"===r.style.display?(r.style.display="flex",u.style.borderRadius="5px 5px 0px 0px"):(r.style.display="none",u.style.borderRadius="")}));class _{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++j}addTaskToCat(e){this.tasks.push(e),e.id=Q,Q++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let V,j=Math.max(...Array.from(N).map((e=>parseInt(e.dataset.catId)))),G=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>j&&(j=t),new _(e.textContent.trim(),null,t)}))}(),J=[...G],K=null,Q=0;class U{constructor(e,t,n,l,o,s){this.id=e,this.title=t,this.category=n,this.dueDate=l,this.priority=o,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return a.style.display="none",void delete S.dataset.editingTaskId;let t,n,l=document.getElementById(e);if(!l)return console.error(`No task div found with id ${e}`),void delete S.dataset.editingTaskId;for(let l of J)if(t=l.tasks.find((t=>t.id==e)),t){n=l;break}n.removeTaskFromCat(e),Q--,Q=J.reduce(((e,t)=>e+t.tasks.length),0),l.parentNode.parentNode.remove(),a.style.display="none",delete S.dataset.editingTaskId}m.addEventListener("click",(function(){S.value="",q.value=$;let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),l=e.getFullYear();e=l+"-"+n+"-"+t,M.value=e,A.value="Low",F.value="",a.style.display="block"})),y.addEventListener("click",(function(e){e.preventDefault(),a.style.display="none"})),g.addEventListener("click",(function(l){if(document.querySelector("form").reportValidity()){l.preventDefault(),S.classList.remove("error");let n=document.getElementById("title").value,o=document.getElementById("category").value,s=document.getElementById("category").value,d=J.find((e=>e.name===s)),c=document.getElementById("dueDate").value,r=document.getElementById("priority").value,u=document.getElementById("description").value;S.dataset.editingTaskId?function(e,n,l,o,s){let d,i=S.dataset.editingTaskId;for(let e of J)if(d=e.tasks.find((e=>e.id==i)),d)break;if(void 0===d)return void console.error(`No task found with id ${i}`);d.title=e,d.category=n,d.dueDate=l,d.priority=o,d.description=s,console.log("editing task, title: "+e+" id: "+i);let c=document.getElementById(i);c.querySelector(".taskTitle").textContent=e,c.querySelector(".taskCategory").textContent=`(${n.name})`,c.querySelector(".taskDueDate").textContent=t(l),c.querySelector(".symbol").src="Highest"==o?"./images/warning-333.png":"High"==o?"./images/warning-222.png":"Medium"==o?"./images/warning-111.png":"./images/warning_grey.png",delete S.dataset.editingTaskId,a.style.display="none"}(n,d,c,r,u):function(n,l,o,s,d,c){let r=new U(Q,n,o,s,d,c);Q++,o.addTaskToCat(r);let u=r.id;const m=document.createElement("div");function g(e){console.log(e),S.value=e.title,q.value=e.category.name,M.value=e.dueDate,A.value=e.priority,F.value=e.description,S.dataset.editingTaskId=e.id,a.style.display="block"}m.classList.add("taskContainerDiv"),function(n,l,o,s,a,d){const c=document.createElement("div");c.classList.add("taskBigDiv");const u=document.createElement("div");u.classList.add("taskDiv"),u.id=n,u.dataset.taskId=n,u.addEventListener("click",(function(){g(r)}));const y=document.createElement("div");y.classList.add("taskPrim"),u.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),f.classList.add("complete"),I.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),f.classList.remove("complete"),I.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=l;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+o+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const E=document.createElement("div");E.classList.add("taskSec"),u.appendChild(E);const f=document.createElement("div");f.classList.add("taskDueDate"),f.textContent=t(s);const I=document.createElement("div");I.classList.add("taskDueDate");const h=document.createElement("img");"Highest"==d.value?h.src="./images/warning-333.png":"High"==d.value?h.src="./images/warning-222.png":"Medium"==d.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),I.appendChild(h);const C=document.createElement("img");C.id=n,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),E.appendChild(f),E.appendChild(I),c.appendChild(u),c.appendChild(C);const B=document.createElement("hr");m.appendChild(c),m.appendChild(B),i.appendChild(m)}(u,n,l,s,0,A)}(n,o,d,c,r,u),a.style.display="none"}else S.classList.add("error");z=null,W=h,Y(z,W),$=q.value,O($),n(H)})),p.addEventListener("click",(function(t){t.stopPropagation();let n=S.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),S.addEventListener("input",(function(){this.classList.remove("error")}))}(),k.addEventListener("click",(function(){K="new",d.style.display="block",catTitle.value="",I.style.backgroundColor="#8a59b9",console.log(I.style.backgroundColor)})),v.addEventListener("click",(function(t){if(t.preventDefault(),"new"===K){let t=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=I.style.backgroundColor,console.log(n);let l=new _(t,n);J.push(l);let o=document.createElement("li"),s=document.createElement("button");s.innerText=t,s.id=t,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=l.catId,e(n)?(console.log(n),console.log("dark"),s.style.color="white"):(console.log(n),console.log("light"),s.style.color="black"),o.appendChild(s),document.getElementById("categoriesList").appendChild(o),initializeCatFilterEvListeners()}else if("edit"===K){console.log(V),"number"!=typeof V&&console.error("catId is not a number at [description of the code location]",V);let t=J.find((e=>e.catId===V));if(t){t.name=document.getElementById("catTitle").value,t.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${V}"]`);n&&(n.innerText=t.name,n.style.backgroundColor=t.color,e(t.color)?(n.style.color="white",T.style.color="white",console.log(T.style.color)):(n.style.color="black",T.style.color="black",console.log(T.style.color)))}else console.error("Could not find category with ID:",V);T.innerHTML=catTitle.value,console.log(f.value),T.style.backgroundColor=f.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);J.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),d.style.display="none"})),E.addEventListener("click",(function(e){e.preventDefault(),d.style.display="none"})),T.addEventListener("click",(function(){V=parseInt(this.dataset.catId),K="edit",function(e,t){let n=document.getElementById("catTitle"),l=document.getElementById("colorDisplay");n.value=e.textContent,l.style.backgroundColor=e.style.backgroundColor,d.style.display="block"}(T)})),I.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(I.style.backgroundColor);f.value=e,f.click()})),f.addEventListener("input",(function(){I.style.background=f.value})),H.classList.add("selectedFilter"),W.classList.add("selectedFilter"),n(H),l(z,$),C.addEventListener("click",(function(){z=R,W=C,Y(z,W),b.textContent=this.textContent})),B.addEventListener("click",(function(){const e=new Date;e.setDate(R.getDate()+7),z=e,W=B,Y(z,W),b.textContent=this.textContent})),L.addEventListener("click",(function(){const e=new Date;e.setDate(R.getDate()+30),z=e,W=L,Y(z,W),b.textContent=this.textContent})),h.addEventListener("click",(function(){z=null,W=h,Y(z,W),b.textContent=this.textContent})),N=document.querySelectorAll(".catBtns"),N.forEach((e=>{e.addEventListener("click",(function(){$=this.textContent,V=parseInt(this.dataset.catId),O($)}))})),c.addEventListener("click",(function(){const e=window.getComputedStyle(s).display;window.innerWidth<750?"none"===e?(s.style.display="block",s.style.zIndex="2",o.style.gridColumn="1 / 3",o.classList.add("overlay"),c.src="./images/collapse3.png"):(s.style.display="none",s.style.zIndex="",o.style.gridColumn="1 / -1",o.classList.remove("overlay"),console.log("expand"),c.src="./images/expand3.png"):"none"===e?(s.style.display="block",s.style.zIndex="",o.style.gridColumn="2/3",o.classList.remove("overlay"),c.src="./images/collapse3.png"):(s.style.display="none",s.style.zIndex="",o.style.gridColumn="1 / -1",o.classList.remove("overlay"),console.log("expand"),c.src="./images/expand3.png")})),x.onclick=function(){a.style.display="none",delete S.dataset.editingTaskId},D.onclick=function(){d.style.display="none"},window.onclick=function(e){e.target==a?a.style.display="none":e.target==d&&(d.style.display="none")},w.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),g.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,