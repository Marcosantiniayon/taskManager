(()=>{"use strict";function e(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,l=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=l,pageTitle.dataset.catId=e.dataset.catId}function l(e,n){document.querySelectorAll(".taskContainerDiv").forEach((l=>{const o=function(e){for(const t of U){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(l.querySelector(".taskDiv").dataset.taskId),s=new Date(t(o.dueDate));s.setHours(0,0,0,0);const a=o.category;!(null===e||s<=e)||"All Inbox"!==n&&a.name!==n?l.style.display="none":l.style.display="block"}))}function o(e){const t=[];document.querySelectorAll(".taskContainerDiv").forEach((e=>{const n=e.querySelector(".taskDiv");n&&t.push(n),console.log(t)}))}const s=document.querySelector(".content"),a=document.querySelector("nav"),d=document.querySelector("#modal"),i=document.querySelector("#catModal"),c=document.querySelector(".tasksContainer"),r=document.getElementById("collapseBtn"),u=document.querySelector(".sortOptions"),m=document.getElementById("sortBtn"),g=document.getElementById("dateBtn"),y=document.getElementById("importanceBtn"),p=document.getElementById("createTask"),k=document.getElementById("okTaskBtn"),v=document.getElementById("cancelTaskBtn"),E=document.getElementById("delete"),f=document.getElementById("newCatBtn"),I=document.getElementById("okCatBtn"),h=document.getElementById("cancelCatBtn"),C=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),B=document.getElementById("colorDisplay"),L=document.getElementById("allBtn"),b=document.getElementById("todayBtn"),x=document.getElementById("thisWeekBtn"),D=document.getElementById("thisMonthBtn"),w=document.getElementById("pageTimeline");let S=document.getElementsByClassName("close")[0],T=document.getElementsByClassName("closeCatModal")[0],q=document.querySelector("form"),A=document.getElementById("pageTitle"),M=document.getElementById("title"),F=document.getElementById("category"),N=document.getElementById("dueDate"),P=document.getElementById("priority"),$=document.getElementById("description"),H=document.querySelectorAll(".catBtns"),z=document.querySelectorAll(".timelineBtns"),W="All Inbox",R=document.getElementById(W),O=null,Y=document.getElementById("allBtn");const _=function(){const e=new Date;return e.setHours(0,0,0,0),e}();function V(e){return H.forEach((e=>{e.classList.remove("selectedFilter")})),R=document.getElementById(e),R.classList.add("selectedFilter"),n(R),l(O,e),R}function j(e,t){return console.log(t),z.forEach((e=>{e.classList.remove("selectedFilter")})),n(R),l(e,W),t.classList.add("selectedFilter"),t}m.addEventListener("click",(function(){"none"===u.style.display?(u.style.display="flex",m.style.borderRadius="5px 5px 0px 0px"):(u.style.display="none",m.style.borderRadius="")})),g.addEventListener("click",(function(){o()})),y.addEventListener("click",(function(){o()}));class G{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++K}addTaskToCat(e){this.tasks.push(e),e.id=Z,Z++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let J,K=Math.max(...Array.from(H).map((e=>parseInt(e.dataset.catId)))),Q=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>K&&(K=t),new G(e.textContent.trim(),null,t)}))}(),U=[...Q],X=null,Z=0;class ee{constructor(e,t,n,l,o,s){this.id=e,this.title=t,this.category=n,this.dueDate=l,this.priority=o,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return d.style.display="none",void delete M.dataset.editingTaskId;let t,n,l=document.getElementById(e);if(!l)return console.error(`No task div found with id ${e}`),void delete M.dataset.editingTaskId;for(let l of U)if(t=l.tasks.find((t=>t.id==e)),t){n=l;break}n.removeTaskFromCat(e),Z--,Z=U.reduce(((e,t)=>e+t.tasks.length),0),l.parentNode.parentNode.remove(),d.style.display="none",delete M.dataset.editingTaskId}p.addEventListener("click",(function(){M.value="",F.value=W;let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),l=e.getFullYear();e=l+"-"+n+"-"+t,N.value=e,P.value="Low",$.value="",d.style.display="block"})),v.addEventListener("click",(function(e){e.preventDefault(),d.style.display="none"})),k.addEventListener("click",(function(l){if(document.querySelector("form").reportValidity()){l.preventDefault(),M.classList.remove("error");let n=document.getElementById("title").value,o=document.getElementById("category").value,s=document.getElementById("category").value,a=U.find((e=>e.name===s)),i=document.getElementById("dueDate").value,r=document.getElementById("priority").value,u=document.getElementById("description").value;M.dataset.editingTaskId?function(e,n,l,o,s){let a,i=M.dataset.editingTaskId;for(let e of U)if(a=e.tasks.find((e=>e.id==i)),a)break;if(void 0===a)return void console.error(`No task found with id ${i}`);a.title=e,a.category=n,a.dueDate=l,a.priority=o,a.description=s,console.log("editing task, title: "+e+" id: "+i);let c=document.getElementById(i);c.querySelector(".taskTitle").textContent=e,c.querySelector(".taskCategory").textContent=`(${n.name})`,c.querySelector(".taskDueDate").textContent=t(l),c.querySelector(".symbol").src="Highest"==o?"./images/warning-333.png":"High"==o?"./images/warning-222.png":"Medium"==o?"./images/warning-111.png":"./images/warning_grey.png",delete M.dataset.editingTaskId,d.style.display="none"}(n,a,i,r,u):function(n,l,o,s,a,i){let r=new ee(Z,n,o,s,a,i);Z++,o.addTaskToCat(r);let u=r.id;const m=document.createElement("div");function g(e){console.log(e),M.value=e.title,F.value=e.category.name,N.value=e.dueDate,P.value=e.priority,$.value=e.description,M.dataset.editingTaskId=e.id,d.style.display="block"}m.classList.add("taskContainerDiv"),function(n,l,o,s,a,d){const i=document.createElement("div");i.classList.add("taskBigDiv");const u=document.createElement("div");u.classList.add("taskDiv"),u.id=n,u.dataset.taskId=n,u.addEventListener("click",(function(){g(r)}));const y=document.createElement("div");y.classList.add("taskPrim"),u.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),f.classList.add("complete"),I.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),f.classList.remove("complete"),I.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=l;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+o+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const E=document.createElement("div");E.classList.add("taskSec"),u.appendChild(E);const f=document.createElement("div");f.classList.add("taskDueDate"),f.textContent=t(s);const I=document.createElement("div");I.classList.add("taskDueDate");const h=document.createElement("img");"Highest"==d.value?h.src="./images/warning-333.png":"High"==d.value?h.src="./images/warning-222.png":"Medium"==d.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),I.appendChild(h);const C=document.createElement("img");C.id=n,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),E.appendChild(f),E.appendChild(I),i.appendChild(u),i.appendChild(C);const B=document.createElement("hr");m.appendChild(i),m.appendChild(B),c.appendChild(m)}(u,n,l,s,0,P)}(n,o,a,i,r,u),d.style.display="none"}else M.classList.add("error");O=null,Y=L,j(O,Y),W=F.value,V(W),n(R)})),E.addEventListener("click",(function(t){t.stopPropagation();let n=M.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),M.addEventListener("input",(function(){this.classList.remove("error")}))}(),f.addEventListener("click",(function(){X="new",i.style.display="block",catTitle.value="",B.style.backgroundColor="#8a59b9",console.log(B.style.backgroundColor)})),I.addEventListener("click",(function(t){if(t.preventDefault(),"new"===X){let t=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=B.style.backgroundColor,console.log(n);let l=new G(t,n);U.push(l);let o=document.createElement("li"),s=document.createElement("button");s.innerText=t,s.id=t,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=l.catId,e(n)?(console.log(n),console.log("dark"),s.style.color="white"):(console.log(n),console.log("light"),s.style.color="black"),o.appendChild(s),document.getElementById("categoriesList").appendChild(o),initializeCatFilterEvListeners()}else if("edit"===X){console.log(J),"number"!=typeof J&&console.error("catId is not a number at [description of the code location]",J);let t=U.find((e=>e.catId===J));if(t){t.name=document.getElementById("catTitle").value,t.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${J}"]`);n&&(n.innerText=t.name,n.style.backgroundColor=t.color,e(t.color)?(n.style.color="white",A.style.color="white",console.log(A.style.color)):(n.style.color="black",A.style.color="black",console.log(A.style.color)))}else console.error("Could not find category with ID:",J);A.innerHTML=catTitle.value,console.log(C.value),A.style.backgroundColor=C.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);U.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),i.style.display="none"})),h.addEventListener("click",(function(e){e.preventDefault(),i.style.display="none"})),A.addEventListener("click",(function(){J=parseInt(this.dataset.catId),X="edit",function(e,t){let n=document.getElementById("catTitle"),l=document.getElementById("colorDisplay");n.value=e.textContent,l.style.backgroundColor=e.style.backgroundColor,i.style.display="block"}(A)})),B.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(B.style.backgroundColor);C.value=e,C.click()})),C.addEventListener("input",(function(){B.style.background=C.value})),R.classList.add("selectedFilter"),Y.classList.add("selectedFilter"),n(R),l(O,W),b.addEventListener("click",(function(){O=_,Y=b,j(O,Y),w.textContent=this.textContent})),x.addEventListener("click",(function(){const e=new Date;e.setDate(_.getDate()+7),O=e,Y=x,j(O,Y),w.textContent=this.textContent})),D.addEventListener("click",(function(){const e=new Date;e.setDate(_.getDate()+30),O=e,Y=D,j(O,Y),w.textContent=this.textContent})),L.addEventListener("click",(function(){O=null,Y=L,j(O,Y),w.textContent=this.textContent})),H=document.querySelectorAll(".catBtns"),H.forEach((e=>{e.addEventListener("click",(function(){W=this.textContent,J=parseInt(this.dataset.catId),V(W)}))})),r.addEventListener("click",(function(){const e=window.getComputedStyle(a).display;window.innerWidth<750?"none"===e?(a.style.display="block",a.style.zIndex="2",s.style.gridColumn="1 / 3",s.classList.add("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png"):"none"===e?(a.style.display="block",a.style.zIndex="",s.style.gridColumn="2/3",s.classList.remove("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png")})),S.onclick=function(){d.style.display="none",delete M.dataset.editingTaskId},T.onclick=function(){i.style.display="none"},window.onclick=function(e){e.target==d?d.style.display="none":e.target==i&&(i.style.display="none")},q.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),k.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,