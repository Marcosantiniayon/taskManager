(()=>{"use strict";function e(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,o=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=o,pageTitle.dataset.catId=e.dataset.catId}function o(e,n){document.querySelectorAll(".taskContainerDiv").forEach((o=>{const s=function(e){for(const t of U){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(o.querySelector(".taskDiv").dataset.taskId),l=new Date(t(s.dueDate));l.setHours(0,0,0,0);const a=s.category;!(null===e||l<=e)||"All Inbox"!==n&&a.name!==n?o.style.display="none":o.style.display="block"}))}function s(e){const t=[];document.querySelectorAll(".taskContainerDiv").forEach((e=>{const n=e.querySelector(".taskDiv");n&&(function(e){const t=e.querySelector(".taskTitle").innerHTML,n=e.querySelector(".taskCategory").innerHTML,o=e.querySelector(".taskDueDate").innerHTML,s=e.querySelector(".taskPriority").innerHTML;e.taskData={taskTitle:t,taskCategory:n,taskDueDate:o,taskPriority:s}}(n),t.push(n))})),"date"===e?t.sort(((e,t)=>new Date(e.taskData.taskDueDate)-new Date(t.taskData.taskDueDate))):"priority"===e&&t.sort(((e,t)=>{const n=t.querySelector(".taskPriority img"),s=e.querySelector(".taskPriority img"),l=n?n.getAttribute("src"):"",a=s?s.getAttribute("src"):"",i=o(l),d=o(a);return console.log(i),console.log(d),i-d})),console.log(t),document.querySelectorAll(".taskContainerDiv").forEach((e=>{e.parentNode.removeChild(e)}));const n=document.querySelector(".tasksContainer");function o(e){switch(e){case"./images/warning-333.png":return 3;case"./images/warning-222.png":return 2;case"./images/warning-111.png":return 1;case"./images/warning_grey.png":return 0;default:return-1}}t.forEach(((e,t)=>{const s=document.createElement("div");s.classList.add("taskContainerDiv");const l=document.createElement("div");l.classList.add("taskBigDiv");const a=document.createElement("div");a.classList.add("taskDiv"),a.id=(t+1).toString(),a.dataset.taskId=a.id,a.addEventListener("click",(function(){openTaskModalForEditing(newTask)}));const i=document.createElement("div");i.classList.add("taskPrim"),a.appendChild(i);const d=document.createElement("input");d.type="checkbox",d.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(c.classList.add("complete"),r.classList.add("complete"),m.classList.add("complete"),g.classList.add("complete")):(c.classList.remove("complete"),r.classList.remove("complete"),m.classList.remove("complete"),g.classList.remove("complete"))}));const c=document.createElement("div");c.classList.add("taskTitle"),c.textContent=e.taskTitle;const r=document.createElement("div");r.classList.add("taskCategory"),r.textContent="("+e.category+")",i.appendChild(d),i.appendChild(c),i.appendChild(r);const u=document.createElement("div");u.classList.add("taskSec"),a.appendChild(u);const m=document.createElement("div");m.classList.add("taskDueDate"),m.textContent=e.taskDueDate;const g=document.createElement("div");g.classList.add("taskPriority");const y=document.createElement("img"),p=e.querySelector(".taskPriority img"),k=o(p?p.getAttribute("src"):"");y.src=3==k?"./images/warning-333.png":2==k?"./images/warning-222.png":1==k?"./images/warning-111.png":"./images/warning_grey.png",y.classList.add("symbol"),g.appendChild(y);const v=document.createElement("img");v.id=a.id,v.src="./images/delete.png",v.classList.add("symbol"),v.addEventListener("click",(function(e){e.stopPropagation(),v.id?deleteTask(a.id):console.log("No task is currently being edited")})),u.appendChild(m),u.appendChild(g),l.appendChild(a),l.appendChild(v);const E=document.createElement("hr");s.appendChild(l),s.appendChild(E),n.appendChild(s)}))}const l=document.querySelector(".content"),a=document.querySelector("nav"),i=document.querySelector("#modal"),d=document.querySelector("#catModal"),c=document.querySelector(".tasksContainer"),r=document.getElementById("collapseBtn"),u=document.querySelector(".sortOptions"),m=document.getElementById("sortBtn"),g=document.getElementById("dateBtn"),y=document.getElementById("importanceBtn"),p=document.getElementById("createTask"),k=document.getElementById("okTaskBtn"),v=document.getElementById("cancelTaskBtn"),E=document.getElementById("delete"),f=document.getElementById("newCatBtn"),h=document.getElementById("okCatBtn"),C=document.getElementById("cancelCatBtn"),I=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),L=document.getElementById("colorDisplay"),B=document.getElementById("allBtn"),D=document.getElementById("todayBtn"),b=document.getElementById("thisWeekBtn"),w=document.getElementById("thisMonthBtn"),S=document.getElementById("pageTimeline");let T=document.getElementsByClassName("close")[0],x=document.getElementsByClassName("closeCatModal")[0],q=document.querySelector("form"),P=document.getElementById("pageTitle"),M=document.getElementById("title"),A=document.getElementById("category"),F=document.getElementById("dueDate"),H=document.getElementById("priority"),N=document.getElementById("description"),$=document.querySelectorAll(".catBtns"),z=document.querySelectorAll(".timelineBtns"),W="All Inbox",_=document.getElementById(W),R=null,O=document.getElementById("allBtn");const Y=function(){const e=new Date;return e.setHours(0,0,0,0),e}();function V(e){return $.forEach((e=>{e.classList.remove("selectedFilter")})),_=document.getElementById(e),_.classList.add("selectedFilter"),n(_),o(R,e),_}function j(e,t){return console.log(t),z.forEach((e=>{e.classList.remove("selectedFilter")})),n(_),o(e,W),t.classList.add("selectedFilter"),t}m.addEventListener("click",(function(){"none"===u.style.display?(u.style.display="flex",m.style.borderRadius="5px 5px 0px 0px"):(u.style.display="none",m.style.borderRadius="")})),g.addEventListener("click",(function(){s("date")})),y.addEventListener("click",(function(){s("priority")}));class G{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++K}addTaskToCat(e){this.tasks.push(e),e.id=Z,Z++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let J,K=Math.max(...Array.from($).map((e=>parseInt(e.dataset.catId)))),Q=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>K&&(K=t),new G(e.textContent.trim(),null,t)}))}(),U=[...Q],X=null,Z=0;class ee{constructor(e,t,n,o,s,l){this.id=e,this.title=t,this.category=n,this.dueDate=o,this.priority=s,this.description=l,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return i.style.display="none",void delete M.dataset.editingTaskId;let t,n,o=document.getElementById(e);if(!o)return console.error(`No task div found with id ${e}`),void delete M.dataset.editingTaskId;for(let o of U)if(t=o.tasks.find((t=>t.id==e)),t){n=o;break}n.removeTaskFromCat(e),Z--,Z=U.reduce(((e,t)=>e+t.tasks.length),0),o.parentNode.parentNode.remove(),i.style.display="none",delete M.dataset.editingTaskId}p.addEventListener("click",(function(){M.value="",A.value=W;let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),o=e.getFullYear();e=o+"-"+n+"-"+t,F.value=e,H.value="Low",N.value="",i.style.display="block"})),v.addEventListener("click",(function(e){e.preventDefault(),i.style.display="none"})),k.addEventListener("click",(function(o){if(document.querySelector("form").reportValidity()){o.preventDefault(),M.classList.remove("error");let n=document.getElementById("title").value,s=document.getElementById("category").value,l=document.getElementById("category").value,a=U.find((e=>e.name===l)),d=document.getElementById("dueDate").value,r=document.getElementById("priority").value,u=document.getElementById("description").value;M.dataset.editingTaskId?function(e,n,o,s,l){let a,d=M.dataset.editingTaskId;for(let e of U)if(a=e.tasks.find((e=>e.id==d)),a)break;if(void 0===a)return void console.error(`No task found with id ${d}`);a.title=e,a.category=n,a.dueDate=o,a.priority=s,a.description=l,console.log("editing task, title: "+e+" id: "+d);let c=document.getElementById(d);c.querySelector(".taskTitle").textContent=e,c.querySelector(".taskCategory").textContent=`(${n.name})`,c.querySelector(".taskDueDate").textContent=t(o),c.querySelector(".symbol").src="Highest"==s?"./images/warning-333.png":"High"==s?"./images/warning-222.png":"Medium"==s?"./images/warning-111.png":"./images/warning_grey.png",delete M.dataset.editingTaskId,i.style.display="none"}(n,a,d,r,u):function(n,o,s,l,a,d){let r=new ee(Z,n,s,l,a,d);Z++,s.addTaskToCat(r);let u=r.id;const m=document.createElement("div");function g(e){console.log(e),M.value=e.title,A.value=e.category.name,F.value=e.dueDate,H.value=e.priority,N.value=e.description,M.dataset.editingTaskId=e.id,i.style.display="block"}m.classList.add("taskContainerDiv"),function(n,o,s,l,a,i){const d=document.createElement("div");d.classList.add("taskBigDiv");const u=document.createElement("div");u.classList.add("taskDiv"),u.id=n,u.dataset.taskId=n,u.addEventListener("click",(function(){g(r)}));const y=document.createElement("div");y.classList.add("taskPrim"),u.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),f.classList.add("complete"),h.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),f.classList.remove("complete"),h.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=o;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+s+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const E=document.createElement("div");E.classList.add("taskSec"),u.appendChild(E);const f=document.createElement("div");f.classList.add("taskDueDate"),f.textContent=t(l);const h=document.createElement("div");h.classList.add("taskPriority");const C=document.createElement("img");"Highest"==i.value?C.src="./images/warning-333.png":"High"==i.value?C.src="./images/warning-222.png":"Medium"==i.value?C.src="./images/warning-111.png":C.src="./images/warning_grey.png",C.classList.add("symbol"),h.appendChild(C);const I=document.createElement("img");I.id=n,I.src="./images/delete.png",I.classList.add("symbol"),I.addEventListener("click",(function(t){t.stopPropagation();let n=I.id;n?e(n):console.log("No task is currently being edited")})),E.appendChild(f),E.appendChild(h),d.appendChild(u),d.appendChild(I);const L=document.createElement("hr");m.appendChild(d),m.appendChild(L),c.appendChild(m)}(u,n,o,l,0,H)}(n,s,a,d,r,u),i.style.display="none"}else M.classList.add("error");R=null,O=B,j(R,O),W=A.value,V(W),n(_)})),E.addEventListener("click",(function(t){t.stopPropagation();let n=M.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),M.addEventListener("input",(function(){this.classList.remove("error")}))}(),f.addEventListener("click",(function(){X="new",d.style.display="block",catTitle.value="",L.style.backgroundColor="#8a59b9",console.log(L.style.backgroundColor)})),h.addEventListener("click",(function(t){if(t.preventDefault(),"new"===X){let t=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=L.style.backgroundColor,console.log(n);let o=new G(t,n);U.push(o);let s=document.createElement("li"),l=document.createElement("button");l.innerText=t,l.id=t,l.classList.add("catBtns"),l.style.backgroundColor=n,l.dataset.catId=o.catId,e(n)?(console.log(n),console.log("dark"),l.style.color="white"):(console.log(n),console.log("light"),l.style.color="black"),s.appendChild(l),document.getElementById("categoriesList").appendChild(s),initializeCatFilterEvListeners()}else if("edit"===X){console.log(J),"number"!=typeof J&&console.error("catId is not a number at [description of the code location]",J);let t=U.find((e=>e.catId===J));if(t){t.name=document.getElementById("catTitle").value,t.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${J}"]`);n&&(n.innerText=t.name,n.style.backgroundColor=t.color,e(t.color)?(n.style.color="white",P.style.color="white",console.log(P.style.color)):(n.style.color="black",P.style.color="black",console.log(P.style.color)))}else console.error("Could not find category with ID:",J);P.innerHTML=catTitle.value,console.log(I.value),P.style.backgroundColor=I.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);U.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),d.style.display="none"})),C.addEventListener("click",(function(e){e.preventDefault(),d.style.display="none"})),P.addEventListener("click",(function(){J=parseInt(this.dataset.catId),X="edit",function(e,t){let n=document.getElementById("catTitle"),o=document.getElementById("colorDisplay");n.value=e.textContent,o.style.backgroundColor=e.style.backgroundColor,d.style.display="block"}(P)})),L.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(L.style.backgroundColor);I.value=e,I.click()})),I.addEventListener("input",(function(){L.style.background=I.value})),_.classList.add("selectedFilter"),O.classList.add("selectedFilter"),n(_),o(R,W),D.addEventListener("click",(function(){R=Y,O=D,j(R,O),S.textContent=this.textContent})),b.addEventListener("click",(function(){const e=new Date;e.setDate(Y.getDate()+7),R=e,O=b,j(R,O),S.textContent=this.textContent})),w.addEventListener("click",(function(){const e=new Date;e.setDate(Y.getDate()+30),R=e,O=w,j(R,O),S.textContent=this.textContent})),B.addEventListener("click",(function(){R=null,O=B,j(R,O),S.textContent=this.textContent})),$=document.querySelectorAll(".catBtns"),$.forEach((e=>{e.addEventListener("click",(function(){W=this.textContent,J=parseInt(this.dataset.catId),V(W)}))})),r.addEventListener("click",(function(){const e=window.getComputedStyle(a).display;window.innerWidth<750?"none"===e?(a.style.display="block",a.style.zIndex="2",l.style.gridColumn="1 / 3",l.classList.add("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",l.style.gridColumn="1 / -1",l.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png"):"none"===e?(a.style.display="block",a.style.zIndex="",l.style.gridColumn="2/3",l.classList.remove("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",l.style.gridColumn="1 / -1",l.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png")})),T.onclick=function(){i.style.display="none",delete M.dataset.editingTaskId},x.onclick=function(){d.style.display="none"},window.onclick=function(e){e.target==i?i.style.display="none":e.target==d&&(d.style.display="none")},q.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),k.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,