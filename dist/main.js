(()=>{"use strict";function e(){const e=new Date;return e.setHours(0,0,0,0),e}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){let t=window.getComputedStyle(e),n=t.backgroundColor,l=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=l}function l(){thisWeekBtn.classList.remove("selectedFilter"),thisMonthBtn.classList.remove("selectedFilter"),allBtn.classList.remove("selectedFilter"),todayBtn.classList.remove("selectedFilter")}function o(e,n,l){document.querySelectorAll(".taskContainerDiv").forEach((l=>{const o=function(e){for(const t of Y){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(l.querySelector(".taskDiv").dataset.taskId),s=new Date(t(o.dueDate));s.setHours(0,0,0,0);const a=o.category;!(null===e||s<=e)||"All Inbox"!==n&&a.name!==n?l.style.display="none":l.style.display="block"})),pageTitle.textContent=n,pageTitle.dataset.catId=l}const s=document.querySelector(".content"),a=document.querySelector("nav"),d=document.querySelector("#modal"),i=document.querySelector("#catModal"),c=document.querySelector(".tasksContainer"),r=document.getElementById("collapseBtn"),u=document.getElementById("createTask"),m=document.getElementById("okTaskBtn"),g=document.getElementById("cancelTaskBtn"),y=document.getElementById("delete"),p=document.getElementById("newCatBtn"),k=document.getElementById("okCatBtn"),v=document.getElementById("cancelCatBtn"),E=(document.getElementById("inboxBtn"),document.getElementById("responsibilitiesBtn"),document.getElementById("eventsBtn"),document.getElementById("programmingBtn"),document.getElementById("colorPicker")),f=document.getElementById("colorDisplay"),h=document.getElementById("allBtn"),I=document.getElementById("todayBtn"),C=document.getElementById("thisWeekBtn"),B=document.getElementById("thisMonthBtn"),L=document.getElementById("pageTimeline");let D=document.getElementsByClassName("close")[0],b=document.getElementsByClassName("closeCatModal")[0],x=document.querySelector("form"),w=document.getElementById("pageTitle"),T=document.getElementById("title"),S=document.getElementById("category"),F=document.getElementById("dueDate"),q=document.getElementById("priority"),M=document.getElementById("description"),A=document.querySelectorAll(".catBtns"),N="All Inbox",P=e();class ${constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++z}addTaskToCat(e){this.tasks.push(e),e.id=O,O++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let H,z=Math.max(...Array.from(A).map((e=>parseInt(e.dataset.catId)))),W=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>z&&(z=t),new $(e.textContent.trim(),null,t)}))}(),Y=[...W],_=null,O=0;class V{constructor(e,t,n,l,o,s){this.id=e,this.title=t,this.category=n,this.dueDate=l,this.priority=o,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return d.style.display="none",void delete T.dataset.editingTaskId;let t,n,l=document.getElementById(e);if(!l)return console.error(`No task div found with id ${e}`),void delete T.dataset.editingTaskId;for(let l of Y)if(t=l.tasks.find((t=>t.id==e)),t){n=l;break}n.removeTaskFromCat(e),O--,O=Y.reduce(((e,t)=>e+t.tasks.length),0);let o=l.parentNode.parentNode;console.log(o),console.log(o.nextElementSibling),console.log(o.nextElementSibling.tagName),o.remove(),d.style.display="none",delete T.dataset.editingTaskId}u.addEventListener("click",(function(){T.value="",S.value="All Inbox";let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),l=e.getFullYear();e=l+"-"+n+"-"+t,F.value=e,q.value="Low",M.value="",d.style.display="block"})),g.addEventListener("click",(function(e){e.preventDefault(),d.style.display="none"})),m.addEventListener("click",(function(n){if(document.querySelector("form").reportValidity()){n.preventDefault(),T.classList.remove("error");let l=document.getElementById("title").value,s=document.getElementById("category").value,a=document.getElementById("category").value,i=Y.find((e=>e.name===a)),r=document.getElementById("dueDate").value,u=document.getElementById("priority").value,m=document.getElementById("description").value;T.dataset.editingTaskId?function(e,n,l,s,a){let i,c=T.dataset.editingTaskId;for(let e of Y)if(i=e.tasks.find((e=>e.id==c)),i)break;if(void 0===i)return void console.error(`No task found with id ${c}`);i.title=e,i.category=n,i.dueDate=l,i.priority=s,i.description=a,console.log("editing task, title: "+e+" id: "+c);let r=document.getElementById(c);r.querySelector(".taskTitle").textContent=e,r.querySelector(".taskCategory").textContent=`(${n.name})`,r.querySelector(".taskDueDate").textContent=t(l),r.querySelector(".symbol").src="Highest"==s?"./images/warning-333.png":"High"==s?"./images/warning-222.png":"Medium"==s?"./images/warning-111.png":"./images/warning_grey.png",delete T.dataset.editingTaskId,d.style.display="none",o(P,N)}(l,i,r,u,m):function(n,l,s,a,i,r){let u=new V(O,n,s,a,i,r);O++,console.log(s),s.addTaskToCat(u);let m=u.id;const g=document.createElement("div");function y(e){console.log(e),T.value=e.title,S.value=e.category.name,F.value=e.dueDate,q.value=e.priority,M.value=e.description,T.dataset.editingTaskId=e.id,d.style.display="block"}g.classList.add("taskContainerDiv"),function(n,l,o,s,a,d){const i=document.createElement("div");i.classList.add("taskBigDiv");const r=document.createElement("div");r.classList.add("taskDiv"),r.id=n,r.dataset.taskId=n,r.addEventListener("click",(function(){y(u)}));const m=document.createElement("div");m.classList.add("taskPrim"),r.appendChild(m);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),f.classList.add("complete"),h.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),f.classList.remove("complete"),h.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=l;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+o+")",m.appendChild(p),m.appendChild(k),m.appendChild(v);const E=document.createElement("div");E.classList.add("taskSec"),r.appendChild(E);const f=document.createElement("div");f.classList.add("taskDueDate"),f.textContent=t(s);const h=document.createElement("div");h.classList.add("taskDueDate");const I=document.createElement("img");"Highest"==d.value?I.src="./images/warning-333.png":"High"==d.value?I.src="./images/warning-222.png":"Medium"==d.value?I.src="./images/warning-111.png":I.src="./images/warning_grey.png",I.classList.add("symbol"),h.appendChild(I);const C=document.createElement("img");C.id=n,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),E.appendChild(f),E.appendChild(h),i.appendChild(r),i.appendChild(C);const B=document.createElement("hr");g.appendChild(i),g.appendChild(B),c.appendChild(g)}(m,n,l,a,0,q),o(P,N)}(l,s,i,r,u,m),d.style.display="none"}else T.classList.add("error")})),y.addEventListener("click",(function(t){t.stopPropagation();let n=T.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),T.addEventListener("input",(function(){this.classList.remove("error")}))}(),p.addEventListener("click",(function(){_="new",i.style.display="block"})),k.addEventListener("click",(function(e){if(e.preventDefault(),"new"===_){let e=document.getElementById("catTitle").value,t=document.getElementById("colorPicker").value,n=new Category(e,t);Y.push(n);let l=document.createElement("li"),o=document.createElement("button");o.innerText=e,o.classList.add("catBtns"),o.style.backgroundColor=t,o.dataset.catId=n.catId,isDarkColor(t)?o.style.color="white":o.style.color="black",l.appendChild(o),document.getElementById("categoriesList").appendChild(l)}else if("edit"===_){"number"!=typeof H&&console.error("catId is not a number at [description of the code location]",H);let e=Y.find((e=>e.catId===H));if(e){e.name=document.getElementById("catTitle").value,e.color=document.getElementById("colorPicker").value;let t=document.querySelector(`button[data-cat-id="${H}"]`);t&&(t.innerText=e.name,t.style.backgroundColor=e.color,isDarkColor(e.color)?t.style.color="white":t.style.color="black")}else console.error("Could not find category with ID:",H)}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);Y.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),filterBtnsEvListeners(),i.style.display="none"})),v.addEventListener("click",(function(){})),w.addEventListener("click",(function(){H=parseInt(this.dataset.catId),_="edit",function(e,t){console.log("Editing category with ID:",t),console.log(e.textContent),console.log(e.style.backgroundColor);let n=document.getElementById("catTitle"),l=document.getElementById("colorDisplay");n.value=e.textContent,l.style.backgroundColor=e.style.backgroundColor,i.style.display="block"}(w,H)})),E.value="#8a59b9",f.addEventListener("click",(function(){E.click()})),E.addEventListener("input",(function(){f.style.background=E.value})),function(){let e=document.getElementById("inboxBtn");e.classList.add("selectedFilter"),n(e),document.getElementById("allBtn").classList.add("selectedFilter")}(),I.addEventListener("click",(function(){const t=e();P=t,o(P,N),l(),I.classList.add("selectedFilter"),L.textContent=this.textContent})),C.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+7),P=n,o(P,N),l(),C.classList.add("selectedFilter"),L.textContent=this.textContent})),B.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+30),P=n,o(P,N),l(),B.classList.add("selectedFilter"),L.textContent=this.textContent})),h.addEventListener("click",(function(){P=null,o(P,N),l(),h.classList.add("selectedFilter"),L.textContent=this.textContent,h.classList.add("selectedFilter")})),A.forEach((e=>{e.addEventListener("click",(function(){A.forEach((e=>{e.classList.remove("selectedFilter")})),this.classList.add("selectedFilter"),N=this.textContent,H=parseInt(this.dataset.catId),n(this),o(P,N,H)}))})),r.addEventListener("click",(function(){const e=window.getComputedStyle(a).display;window.innerWidth<750?"none"===e?(a.style.display="block",a.style.zIndex="2",s.style.gridColumn="1 / 3",s.classList.add("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png"):"none"===e?(a.style.display="block",a.style.zIndex="",s.style.gridColumn="2/3",s.classList.remove("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png")})),D.onclick=function(){d.style.display="none",delete T.dataset.editingTaskId},b.onclick=function(){i.style.display="none"},window.onclick=function(e){e.target==d?d.style.display="none":e.target==i&&(i.style.display="none")},x.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),m.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,