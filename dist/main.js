(()=>{"use strict";function e(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,o=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=o,pageTitle.dataset.catId=e.dataset.catId}function o(e,n){document.querySelectorAll(".taskContainerDiv").forEach((o=>{const l=function(e){for(const t of Z){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(o.querySelector(".taskDiv").dataset.taskId),s=new Date(t(l.dueDate));s.setHours(0,0,0,0);const a=l.category;!(null===e||s<=e)||"All Inbox"!==n&&a.name!==n?o.style.display="none":o.style.display="block"}))}let l="oldestFirst",s="highestFirst";function a(e){const t=document.querySelectorAll(".taskContainerDiv"),n=[];t.forEach((e=>{const t=e.querySelector(".taskDueDate").textContent,o=e.querySelector(".taskPriority img").src,l=o.substring(o.lastIndexOf("/")+1);n.push({taskContainerDiv:e,taskDueDate:t,taskPriorityFilename:l})})),"date"===e?("oldestFirst"===l?(n.sort(((e,t)=>new Date(e.taskDueDate)-new Date(t.taskDueDate))),l="newestFirst"):"newestFirst"===l&&(n.sort(((e,t)=>new Date(t.taskDueDate)-new Date(e.taskDueDate))),l="oldestFirst"),console.log(l)):"priority"===e&&function(){function e(e){switch(e){case"warning-333.png":return 3;case"warning-222.png":return 2;case"warning-111.png":return 1;case"warning_grey.png":return 0;default:return-1}}"highestFirst"===s?(n.sort(((t,n)=>{const o=e(t.taskPriorityFilename);return e(n.taskPriorityFilename)-o})),s="lowestFirst"):"lowestFirst"===s&&(n.sort(((t,n)=>e(t.taskPriorityFilename)-e(n.taskPriorityFilename))),s="highestFirst"),console.log(s)}();const o=document.querySelector(".tasksContainer");t.forEach((e=>{o.removeChild(e)})),n.forEach((e=>{o.appendChild(e.taskContainerDiv)}))}const i=document.querySelector(".content"),d=document.querySelector("nav"),c=document.querySelector("#modal"),r=document.querySelector("#catModal"),u=document.querySelector(".tasksContainer"),m=document.getElementById("collapseBtn"),g=document.querySelector(".sortOptions"),y=document.getElementById("sortBtn"),p=document.getElementById("dateBtn"),k=document.getElementById("importanceBtn"),v=document.getElementById("createTask"),f=document.getElementById("okTaskBtn"),E=document.getElementById("cancelTaskBtn"),h=document.getElementById("delete"),I=document.getElementById("newCatBtn"),C=document.getElementById("okCatBtn"),B=document.getElementById("cancelCatBtn"),L=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),D=document.getElementById("colorDisplay"),w=document.getElementById("allBtn"),b=document.getElementById("todayBtn"),x=document.getElementById("thisWeekBtn"),S=document.getElementById("thisMonthBtn"),T=document.getElementById("pageTimeline");let F=document.getElementsByClassName("close")[0],q=document.getElementsByClassName("closeCatModal")[0],P=document.querySelector("form"),A=document.getElementById("pageTitle"),M=document.getElementById("title"),N=document.getElementById("category"),$=document.getElementById("dueDate"),H=document.getElementById("priority"),z=document.getElementById("description"),W=document.querySelectorAll(".catBtns"),O=document.querySelectorAll(".timelineBtns"),R="All Inbox",_=document.getElementById(R),Y=null,V=document.getElementById("allBtn");const j=function(){const e=new Date;return e.setHours(0,0,0,0),e}();function G(e){return W.forEach((e=>{e.classList.remove("selectedFilter")})),_=document.getElementById(e),_.classList.add("selectedFilter"),n(_),o(Y,e),_}function J(e,t){return console.log(t),O.forEach((e=>{e.classList.remove("selectedFilter")})),n(_),o(e,R),t.classList.add("selectedFilter"),t}y.addEventListener("click",(function(){"none"===g.style.display?(g.style.display="flex",y.style.borderRadius="5px 5px 0px 0px"):(g.style.display="none",y.style.borderRadius="")})),p.addEventListener("click",(function(){a("date")})),k.addEventListener("click",(function(){a("priority")}));class K{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++U}addTaskToCat(e){this.tasks.push(e),e.id=te,te++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let Q,U=Math.max(...Array.from(W).map((e=>parseInt(e.dataset.catId)))),X=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>U&&(U=t),new K(e.textContent.trim(),null,t)}))}(),Z=[...X],ee=null,te=0;class ne{constructor(e,t,n,o,l,s){this.id=e,this.title=t,this.category=n,this.dueDate=o,this.priority=l,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return c.style.display="none",void delete M.dataset.editingTaskId;let t,n,o=document.getElementById(e);if(!o)return console.error(`No task div found with id ${e}`),void delete M.dataset.editingTaskId;for(let o of Z)if(t=o.tasks.find((t=>t.id==e)),t){n=o;break}n.removeTaskFromCat(e),te--,te=Z.reduce(((e,t)=>e+t.tasks.length),0),o.parentNode.parentNode.remove(),c.style.display="none",delete M.dataset.editingTaskId}v.addEventListener("click",(function(){M.value="",N.value=R;let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),o=e.getFullYear();e=o+"-"+n+"-"+t,$.value=e,H.value="Low",z.value="",c.style.display="block"})),E.addEventListener("click",(function(e){e.preventDefault(),c.style.display="none"})),f.addEventListener("click",(function(o){if(document.querySelector("form").reportValidity()){o.preventDefault(),M.classList.remove("error");let n=document.getElementById("title").value,l=document.getElementById("category").value,s=document.getElementById("category").value,a=Z.find((e=>e.name===s)),i=document.getElementById("dueDate").value,d=document.getElementById("priority").value,r=document.getElementById("description").value;M.dataset.editingTaskId?function(e,n,o,l,s){let a,i=M.dataset.editingTaskId;for(let e of Z)if(a=e.tasks.find((e=>e.id==i)),a)break;if(void 0===a)return void console.error(`No task found with id ${i}`);a.title=e,a.category=n,a.dueDate=o,a.priority=l,a.description=s,console.log("editing task, title: "+e+" id: "+i);let d=document.getElementById(i);d.querySelector(".taskTitle").textContent=e,d.querySelector(".taskCategory").textContent=`(${n.name})`,d.querySelector(".taskDueDate").textContent=t(o),d.querySelector(".symbol").src="Highest"==l?"./images/warning-333.png":"High"==l?"./images/warning-222.png":"Medium"==l?"./images/warning-111.png":"./images/warning_grey.png",delete M.dataset.editingTaskId,c.style.display="none"}(n,a,i,d,r):function(n,o,l,s,a,i){let d=new ne(te,n,l,s,a,i);te++,l.addTaskToCat(d);let r=d.id;const m=document.createElement("div");function g(e){console.log(e),M.value=e.title,N.value=e.category.name,$.value=e.dueDate,H.value=e.priority,z.value=e.description,M.dataset.editingTaskId=e.id,c.style.display="block"}m.classList.add("taskContainerDiv"),function(n,o,l,s,a,i){const c=document.createElement("div");c.classList.add("taskBigDiv");const r=document.createElement("div");r.classList.add("taskDiv"),r.id=n,r.dataset.taskId=n,r.addEventListener("click",(function(){g(d)}));const y=document.createElement("div");y.classList.add("taskPrim"),r.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),E.classList.add("complete"),h.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),E.classList.remove("complete"),h.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=o;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+l+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const f=document.createElement("div");f.classList.add("taskSec"),r.appendChild(f);const E=document.createElement("div");E.classList.add("taskDueDate"),E.textContent=t(s);const h=document.createElement("div");h.classList.add("taskPriority");const I=document.createElement("img");"Highest"==i.value?I.src="./images/warning-333.png":"High"==i.value?I.src="./images/warning-222.png":"Medium"==i.value?I.src="./images/warning-111.png":I.src="./images/warning_grey.png",I.classList.add("symbol"),h.appendChild(I);const C=document.createElement("img");C.id=n,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),f.appendChild(E),f.appendChild(h),c.appendChild(r),c.appendChild(C);const B=document.createElement("hr");m.appendChild(c),m.appendChild(B),u.appendChild(m)}(r,n,o,s,0,H)}(n,l,a,i,d,r),c.style.display="none"}else M.classList.add("error");Y=null,V=w,J(Y,V),R=N.value,G(R),n(_)})),h.addEventListener("click",(function(t){t.stopPropagation();let n=M.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),M.addEventListener("input",(function(){this.classList.remove("error")}))}(),I.addEventListener("click",(function(){ee="new",r.style.display="block",catTitle.value="",D.style.backgroundColor="#8a59b9",console.log(D.style.backgroundColor)})),C.addEventListener("click",(function(t){if(t.preventDefault(),"new"===ee){let t=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=D.style.backgroundColor,console.log(n);let o=new K(t,n);Z.push(o);let l=document.createElement("li"),s=document.createElement("button");s.innerText=t,s.id=t,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=o.catId,e(n)?(console.log(n),console.log("dark"),s.style.color="white"):(console.log(n),console.log("light"),s.style.color="black"),l.appendChild(s),document.getElementById("categoriesList").appendChild(l),initializeCatFilterEvListeners()}else if("edit"===ee){console.log(Q),"number"!=typeof Q&&console.error("catId is not a number at [description of the code location]",Q);let t=Z.find((e=>e.catId===Q));if(t){t.name=document.getElementById("catTitle").value,t.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${Q}"]`);n&&(n.innerText=t.name,n.style.backgroundColor=t.color,e(t.color)?(n.style.color="white",A.style.color="white",console.log(A.style.color)):(n.style.color="black",A.style.color="black",console.log(A.style.color)))}else console.error("Could not find category with ID:",Q);A.innerHTML=catTitle.value,console.log(L.value),A.style.backgroundColor=L.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);Z.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),r.style.display="none"})),B.addEventListener("click",(function(e){e.preventDefault(),r.style.display="none"})),A.addEventListener("click",(function(){Q=parseInt(this.dataset.catId),ee="edit",function(e,t){let n=document.getElementById("catTitle"),o=document.getElementById("colorDisplay");n.value=e.textContent,o.style.backgroundColor=e.style.backgroundColor,r.style.display="block"}(A)})),D.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(D.style.backgroundColor);L.value=e,L.click()})),L.addEventListener("input",(function(){D.style.background=L.value})),_.classList.add("selectedFilter"),V.classList.add("selectedFilter"),n(_),o(Y,R),b.addEventListener("click",(function(){Y=j,V=b,J(Y,V),T.textContent=this.textContent})),x.addEventListener("click",(function(){const e=new Date;e.setDate(j.getDate()+7),Y=e,V=x,J(Y,V),T.textContent=this.textContent})),S.addEventListener("click",(function(){const e=new Date;e.setDate(j.getDate()+30),Y=e,V=S,J(Y,V),T.textContent=this.textContent})),w.addEventListener("click",(function(){Y=null,V=w,J(Y,V),T.textContent=this.textContent})),W=document.querySelectorAll(".catBtns"),W.forEach((e=>{e.addEventListener("click",(function(){R=this.textContent,Q=parseInt(this.dataset.catId),G(R)}))})),m.addEventListener("click",(function(){const e=window.getComputedStyle(d).display;window.innerWidth<750?"none"===e?(d.style.display="block",d.style.zIndex="2",i.style.gridColumn="1 / 3",i.classList.add("overlay"),m.src="./images/collapse3.png"):(d.style.display="none",d.style.zIndex="",i.style.gridColumn="1 / -1",i.classList.remove("overlay"),console.log("expand"),m.src="./images/expand3.png"):"none"===e?(d.style.display="block",d.style.zIndex="",i.style.gridColumn="2/3",i.classList.remove("overlay"),m.src="./images/collapse3.png"):(d.style.display="none",d.style.zIndex="",i.style.gridColumn="1 / -1",i.classList.remove("overlay"),console.log("expand"),m.src="./images/expand3.png")})),F.onclick=function(){c.style.display="none",delete M.dataset.editingTaskId},q.onclick=function(){r.style.display="none"},window.onclick=function(e){e.target==c?c.style.display="none":e.target==r&&(r.style.display="none")},P.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),f.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,