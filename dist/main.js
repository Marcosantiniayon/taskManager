(()=>{"use strict";function e(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,o=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=o,pageTitle.dataset.catId=e.dataset.catId}function o(e,n){document.querySelectorAll(".taskContainerDiv").forEach((o=>{const l=function(e){for(const t of U){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(o.querySelector(".taskDiv").dataset.taskId),a=new Date(t(l.dueDate));a.setHours(0,0,0,0);const s=l.category;!(null===e||a<=e)||"All Inbox"!==n&&s.name!==n?o.style.display="none":o.style.display="block"}))}function l(e){const t=[];function n(e){switch(e){case"./images/warning-333.png":return 1;case"./images/warning-222.png":return 2;case"./images/warning-111.png":return 3;case"./images/warning_grey.png":return 4;default:return 0}}document.querySelectorAll(".taskContainerDiv").forEach((e=>{const n=e.querySelector(".taskDiv");n&&(function(e){const t=e.querySelector(".taskDueDate").innerHTML,n=e.querySelector(".taskPriority").innerHTML;e.taskData={taskDueDate:t,taskPriority:n}}(n),t.push(n),console.log(n))})),console.log(t),"date"===e?(console.log("date clicked"),t.sort(((e,t)=>new Date(e.taskData.taskDueDate)-new Date(t.taskData.taskDueDate)))):"priority"===e&&(console.log("priority clicked"),t.sort(((e,t)=>n(e.taskData.taskPriority)-n(t.taskData.taskPriority))))}const a=document.querySelector(".content"),s=document.querySelector("nav"),i=document.querySelector("#modal"),d=document.querySelector("#catModal"),c=document.querySelector(".tasksContainer"),r=document.getElementById("collapseBtn"),u=document.querySelector(".sortOptions"),m=document.getElementById("sortBtn"),g=document.getElementById("dateBtn"),y=document.getElementById("importanceBtn"),p=document.getElementById("createTask"),k=document.getElementById("okTaskBtn"),v=document.getElementById("cancelTaskBtn"),f=document.getElementById("delete"),E=document.getElementById("newCatBtn"),I=document.getElementById("okCatBtn"),h=document.getElementById("cancelCatBtn"),C=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),B=document.getElementById("colorDisplay"),L=document.getElementById("allBtn"),D=document.getElementById("todayBtn"),b=document.getElementById("thisWeekBtn"),w=document.getElementById("thisMonthBtn"),x=document.getElementById("pageTimeline");let S=document.getElementsByClassName("close")[0],T=document.getElementsByClassName("closeCatModal")[0],q=document.querySelector("form"),M=document.getElementById("pageTitle"),P=document.getElementById("title"),A=document.getElementById("category"),F=document.getElementById("dueDate"),H=document.getElementById("priority"),N=document.getElementById("description"),$=document.querySelectorAll(".catBtns"),z=document.querySelectorAll(".timelineBtns"),W="All Inbox",R=document.getElementById(W),_=null,O=document.getElementById("allBtn");const Y=function(){const e=new Date;return e.setHours(0,0,0,0),e}();function V(e){return $.forEach((e=>{e.classList.remove("selectedFilter")})),R=document.getElementById(e),R.classList.add("selectedFilter"),n(R),o(_,e),R}function j(e,t){return console.log(t),z.forEach((e=>{e.classList.remove("selectedFilter")})),n(R),o(e,W),t.classList.add("selectedFilter"),t}m.addEventListener("click",(function(){"none"===u.style.display?(u.style.display="flex",m.style.borderRadius="5px 5px 0px 0px"):(u.style.display="none",m.style.borderRadius="")})),g.addEventListener("click",(function(){l("date")})),y.addEventListener("click",(function(){l("priority")}));class G{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++K}addTaskToCat(e){this.tasks.push(e),e.id=Z,Z++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let J,K=Math.max(...Array.from($).map((e=>parseInt(e.dataset.catId)))),Q=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>K&&(K=t),new G(e.textContent.trim(),null,t)}))}(),U=[...Q],X=null,Z=0;class ee{constructor(e,t,n,o,l,a){this.id=e,this.title=t,this.category=n,this.dueDate=o,this.priority=l,this.description=a,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return i.style.display="none",void delete P.dataset.editingTaskId;let t,n,o=document.getElementById(e);if(!o)return console.error(`No task div found with id ${e}`),void delete P.dataset.editingTaskId;for(let o of U)if(t=o.tasks.find((t=>t.id==e)),t){n=o;break}n.removeTaskFromCat(e),Z--,Z=U.reduce(((e,t)=>e+t.tasks.length),0),o.parentNode.parentNode.remove(),i.style.display="none",delete P.dataset.editingTaskId}p.addEventListener("click",(function(){P.value="",A.value=W;let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),o=e.getFullYear();e=o+"-"+n+"-"+t,F.value=e,H.value="Low",N.value="",i.style.display="block"})),v.addEventListener("click",(function(e){e.preventDefault(),i.style.display="none"})),k.addEventListener("click",(function(o){if(document.querySelector("form").reportValidity()){o.preventDefault(),P.classList.remove("error");let n=document.getElementById("title").value,l=document.getElementById("category").value,a=document.getElementById("category").value,s=U.find((e=>e.name===a)),d=document.getElementById("dueDate").value,r=document.getElementById("priority").value,u=document.getElementById("description").value;P.dataset.editingTaskId?function(e,n,o,l,a){let s,d=P.dataset.editingTaskId;for(let e of U)if(s=e.tasks.find((e=>e.id==d)),s)break;if(void 0===s)return void console.error(`No task found with id ${d}`);s.title=e,s.category=n,s.dueDate=o,s.priority=l,s.description=a,console.log("editing task, title: "+e+" id: "+d);let c=document.getElementById(d);c.querySelector(".taskTitle").textContent=e,c.querySelector(".taskCategory").textContent=`(${n.name})`,c.querySelector(".taskDueDate").textContent=t(o),c.querySelector(".symbol").src="Highest"==l?"./images/warning-333.png":"High"==l?"./images/warning-222.png":"Medium"==l?"./images/warning-111.png":"./images/warning_grey.png",delete P.dataset.editingTaskId,i.style.display="none"}(n,s,d,r,u):function(n,o,l,a,s,d){let r=new ee(Z,n,l,a,s,d);Z++,l.addTaskToCat(r);let u=r.id;const m=document.createElement("div");function g(e){console.log(e),P.value=e.title,A.value=e.category.name,F.value=e.dueDate,H.value=e.priority,N.value=e.description,P.dataset.editingTaskId=e.id,i.style.display="block"}m.classList.add("taskContainerDiv"),function(n,o,l,a,s,i){const d=document.createElement("div");d.classList.add("taskBigDiv");const u=document.createElement("div");u.classList.add("taskDiv"),u.id=n,u.dataset.taskId=n,u.addEventListener("click",(function(){g(r)}));const y=document.createElement("div");y.classList.add("taskPrim"),u.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),E.classList.add("complete"),I.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),E.classList.remove("complete"),I.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=o;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+l+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const f=document.createElement("div");f.classList.add("taskSec"),u.appendChild(f);const E=document.createElement("div");E.classList.add("taskDueDate"),E.textContent=t(a);const I=document.createElement("div");I.classList.add("taskPriority");const h=document.createElement("img");"Highest"==i.value?h.src="./images/warning-333.png":"High"==i.value?h.src="./images/warning-222.png":"Medium"==i.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),I.appendChild(h);const C=document.createElement("img");C.id=n,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),f.appendChild(E),f.appendChild(I),d.appendChild(u),d.appendChild(C);const B=document.createElement("hr");m.appendChild(d),m.appendChild(B),c.appendChild(m)}(u,n,o,a,0,H)}(n,l,s,d,r,u),i.style.display="none"}else P.classList.add("error");_=null,O=L,j(_,O),W=A.value,V(W),n(R)})),f.addEventListener("click",(function(t){t.stopPropagation();let n=P.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),P.addEventListener("input",(function(){this.classList.remove("error")}))}(),E.addEventListener("click",(function(){X="new",d.style.display="block",catTitle.value="",B.style.backgroundColor="#8a59b9",console.log(B.style.backgroundColor)})),I.addEventListener("click",(function(t){if(t.preventDefault(),"new"===X){let t=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=B.style.backgroundColor,console.log(n);let o=new G(t,n);U.push(o);let l=document.createElement("li"),a=document.createElement("button");a.innerText=t,a.id=t,a.classList.add("catBtns"),a.style.backgroundColor=n,a.dataset.catId=o.catId,e(n)?(console.log(n),console.log("dark"),a.style.color="white"):(console.log(n),console.log("light"),a.style.color="black"),l.appendChild(a),document.getElementById("categoriesList").appendChild(l),initializeCatFilterEvListeners()}else if("edit"===X){console.log(J),"number"!=typeof J&&console.error("catId is not a number at [description of the code location]",J);let t=U.find((e=>e.catId===J));if(t){t.name=document.getElementById("catTitle").value,t.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${J}"]`);n&&(n.innerText=t.name,n.style.backgroundColor=t.color,e(t.color)?(n.style.color="white",M.style.color="white",console.log(M.style.color)):(n.style.color="black",M.style.color="black",console.log(M.style.color)))}else console.error("Could not find category with ID:",J);M.innerHTML=catTitle.value,console.log(C.value),M.style.backgroundColor=C.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);U.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),d.style.display="none"})),h.addEventListener("click",(function(e){e.preventDefault(),d.style.display="none"})),M.addEventListener("click",(function(){J=parseInt(this.dataset.catId),X="edit",function(e,t){let n=document.getElementById("catTitle"),o=document.getElementById("colorDisplay");n.value=e.textContent,o.style.backgroundColor=e.style.backgroundColor,d.style.display="block"}(M)})),B.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(B.style.backgroundColor);C.value=e,C.click()})),C.addEventListener("input",(function(){B.style.background=C.value})),R.classList.add("selectedFilter"),O.classList.add("selectedFilter"),n(R),o(_,W),D.addEventListener("click",(function(){_=Y,O=D,j(_,O),x.textContent=this.textContent})),b.addEventListener("click",(function(){const e=new Date;e.setDate(Y.getDate()+7),_=e,O=b,j(_,O),x.textContent=this.textContent})),w.addEventListener("click",(function(){const e=new Date;e.setDate(Y.getDate()+30),_=e,O=w,j(_,O),x.textContent=this.textContent})),L.addEventListener("click",(function(){_=null,O=L,j(_,O),x.textContent=this.textContent})),$=document.querySelectorAll(".catBtns"),$.forEach((e=>{e.addEventListener("click",(function(){W=this.textContent,J=parseInt(this.dataset.catId),V(W)}))})),r.addEventListener("click",(function(){const e=window.getComputedStyle(s).display;window.innerWidth<750?"none"===e?(s.style.display="block",s.style.zIndex="2",a.style.gridColumn="1 / 3",a.classList.add("overlay"),r.src="./images/collapse3.png"):(s.style.display="none",s.style.zIndex="",a.style.gridColumn="1 / -1",a.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png"):"none"===e?(s.style.display="block",s.style.zIndex="",a.style.gridColumn="2/3",a.classList.remove("overlay"),r.src="./images/collapse3.png"):(s.style.display="none",s.style.zIndex="",a.style.gridColumn="1 / -1",a.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png")})),S.onclick=function(){i.style.display="none",delete P.dataset.editingTaskId},T.onclick=function(){d.style.display="none"},window.onclick=function(e){e.target==i?i.style.display="none":e.target==d&&(d.style.display="none")},q.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),k.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,