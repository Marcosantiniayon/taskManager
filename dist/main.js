(()=>{"use strict";function e(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,o=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=o,pageTitle.dataset.catId=e.dataset.catId}function o(e,n){document.querySelectorAll(".taskContainerDiv").forEach((o=>{const l=function(e){for(const t of U){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(o.querySelector(".taskDiv").dataset.taskId),s=new Date(t(l.dueDate));s.setHours(0,0,0,0);const a=l.category;!(null===e||s<=e)||"All Inbox"!==n&&a.name!==n?o.style.display="none":o.style.display="block"}))}function l(e){const t=[];function n(e){switch(e){case"./images/warning-333.png":return 3;case"./images/warning-222.png":return 2;case"./images/warning-111.png":return 1;case"./images/warning_grey.png":return 0;default:return-1}}document.querySelectorAll(".taskContainerDiv").forEach((e=>{const n=e.querySelector(".taskDiv");n&&(function(e){const t=e.querySelector(".taskDueDate").innerHTML,n=e.querySelector(".taskPriority").innerHTML;e.taskData={taskDueDate:t,taskPriority:n}}(n),t.push(n))})),"date"===e?t.sort(((e,t)=>new Date(e.taskData.taskDueDate)-new Date(t.taskData.taskDueDate))):"priority"===e&&t.sort(((e,t)=>{const o=t.querySelector(".taskPriority img"),l=e.querySelector(".taskPriority img"),s=o?o.getAttribute("src"):"",a=l?l.getAttribute("src"):"",i=n(s),c=n(a);return console.log(i),console.log(c),i-c})),console.log(t)}const s=document.querySelector(".content"),a=document.querySelector("nav"),i=document.querySelector("#modal"),c=document.querySelector("#catModal"),d=document.querySelector(".tasksContainer"),r=document.getElementById("collapseBtn"),u=document.querySelector(".sortOptions"),m=document.getElementById("sortBtn"),g=document.getElementById("dateBtn"),y=document.getElementById("importanceBtn"),p=document.getElementById("createTask"),k=document.getElementById("okTaskBtn"),v=document.getElementById("cancelTaskBtn"),f=document.getElementById("delete"),E=document.getElementById("newCatBtn"),I=document.getElementById("okCatBtn"),h=document.getElementById("cancelCatBtn"),C=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),B=document.getElementById("colorDisplay"),L=document.getElementById("allBtn"),D=document.getElementById("todayBtn"),b=document.getElementById("thisWeekBtn"),w=document.getElementById("thisMonthBtn"),x=document.getElementById("pageTimeline");let S=document.getElementsByClassName("close")[0],T=document.getElementsByClassName("closeCatModal")[0],q=document.querySelector("form"),A=document.getElementById("pageTitle"),M=document.getElementById("title"),P=document.getElementById("category"),F=document.getElementById("dueDate"),H=document.getElementById("priority"),N=document.getElementById("description"),$=document.querySelectorAll(".catBtns"),z=document.querySelectorAll(".timelineBtns"),W="All Inbox",R=document.getElementById(W),_=null,O=document.getElementById("allBtn");const Y=function(){const e=new Date;return e.setHours(0,0,0,0),e}();function V(e){return $.forEach((e=>{e.classList.remove("selectedFilter")})),R=document.getElementById(e),R.classList.add("selectedFilter"),n(R),o(_,e),R}function j(e,t){return console.log(t),z.forEach((e=>{e.classList.remove("selectedFilter")})),n(R),o(e,W),t.classList.add("selectedFilter"),t}m.addEventListener("click",(function(){"none"===u.style.display?(u.style.display="flex",m.style.borderRadius="5px 5px 0px 0px"):(u.style.display="none",m.style.borderRadius="")})),g.addEventListener("click",(function(){l("date")})),y.addEventListener("click",(function(){l("priority")}));class G{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++K}addTaskToCat(e){this.tasks.push(e),e.id=Z,Z++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let J,K=Math.max(...Array.from($).map((e=>parseInt(e.dataset.catId)))),Q=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>K&&(K=t),new G(e.textContent.trim(),null,t)}))}(),U=[...Q],X=null,Z=0;class ee{constructor(e,t,n,o,l,s){this.id=e,this.title=t,this.category=n,this.dueDate=o,this.priority=l,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return i.style.display="none",void delete M.dataset.editingTaskId;let t,n,o=document.getElementById(e);if(!o)return console.error(`No task div found with id ${e}`),void delete M.dataset.editingTaskId;for(let o of U)if(t=o.tasks.find((t=>t.id==e)),t){n=o;break}n.removeTaskFromCat(e),Z--,Z=U.reduce(((e,t)=>e+t.tasks.length),0),o.parentNode.parentNode.remove(),i.style.display="none",delete M.dataset.editingTaskId}p.addEventListener("click",(function(){M.value="",P.value=W;let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),o=e.getFullYear();e=o+"-"+n+"-"+t,F.value=e,H.value="Low",N.value="",i.style.display="block"})),v.addEventListener("click",(function(e){e.preventDefault(),i.style.display="none"})),k.addEventListener("click",(function(o){if(document.querySelector("form").reportValidity()){o.preventDefault(),M.classList.remove("error");let n=document.getElementById("title").value,l=document.getElementById("category").value,s=document.getElementById("category").value,a=U.find((e=>e.name===s)),c=document.getElementById("dueDate").value,r=document.getElementById("priority").value,u=document.getElementById("description").value;M.dataset.editingTaskId?function(e,n,o,l,s){let a,c=M.dataset.editingTaskId;for(let e of U)if(a=e.tasks.find((e=>e.id==c)),a)break;if(void 0===a)return void console.error(`No task found with id ${c}`);a.title=e,a.category=n,a.dueDate=o,a.priority=l,a.description=s,console.log("editing task, title: "+e+" id: "+c);let d=document.getElementById(c);d.querySelector(".taskTitle").textContent=e,d.querySelector(".taskCategory").textContent=`(${n.name})`,d.querySelector(".taskDueDate").textContent=t(o),d.querySelector(".symbol").src="Highest"==l?"./images/warning-333.png":"High"==l?"./images/warning-222.png":"Medium"==l?"./images/warning-111.png":"./images/warning_grey.png",delete M.dataset.editingTaskId,i.style.display="none"}(n,a,c,r,u):function(n,o,l,s,a,c){let r=new ee(Z,n,l,s,a,c);Z++,l.addTaskToCat(r);let u=r.id;const m=document.createElement("div");function g(e){console.log(e),M.value=e.title,P.value=e.category.name,F.value=e.dueDate,H.value=e.priority,N.value=e.description,M.dataset.editingTaskId=e.id,i.style.display="block"}m.classList.add("taskContainerDiv"),function(n,o,l,s,a,i){const c=document.createElement("div");c.classList.add("taskBigDiv");const u=document.createElement("div");u.classList.add("taskDiv"),u.id=n,u.dataset.taskId=n,u.addEventListener("click",(function(){g(r)}));const y=document.createElement("div");y.classList.add("taskPrim"),u.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),E.classList.add("complete"),I.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),E.classList.remove("complete"),I.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=o;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+l+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const f=document.createElement("div");f.classList.add("taskSec"),u.appendChild(f);const E=document.createElement("div");E.classList.add("taskDueDate"),E.textContent=t(s);const I=document.createElement("div");I.classList.add("taskPriority");const h=document.createElement("img");"Highest"==i.value?h.src="./images/warning-333.png":"High"==i.value?h.src="./images/warning-222.png":"Medium"==i.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),I.appendChild(h);const C=document.createElement("img");C.id=n,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),f.appendChild(E),f.appendChild(I),c.appendChild(u),c.appendChild(C);const B=document.createElement("hr");m.appendChild(c),m.appendChild(B),d.appendChild(m)}(u,n,o,s,0,H)}(n,l,a,c,r,u),i.style.display="none"}else M.classList.add("error");_=null,O=L,j(_,O),W=P.value,V(W),n(R)})),f.addEventListener("click",(function(t){t.stopPropagation();let n=M.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),M.addEventListener("input",(function(){this.classList.remove("error")}))}(),E.addEventListener("click",(function(){X="new",c.style.display="block",catTitle.value="",B.style.backgroundColor="#8a59b9",console.log(B.style.backgroundColor)})),I.addEventListener("click",(function(t){if(t.preventDefault(),"new"===X){let t=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=B.style.backgroundColor,console.log(n);let o=new G(t,n);U.push(o);let l=document.createElement("li"),s=document.createElement("button");s.innerText=t,s.id=t,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=o.catId,e(n)?(console.log(n),console.log("dark"),s.style.color="white"):(console.log(n),console.log("light"),s.style.color="black"),l.appendChild(s),document.getElementById("categoriesList").appendChild(l),initializeCatFilterEvListeners()}else if("edit"===X){console.log(J),"number"!=typeof J&&console.error("catId is not a number at [description of the code location]",J);let t=U.find((e=>e.catId===J));if(t){t.name=document.getElementById("catTitle").value,t.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${J}"]`);n&&(n.innerText=t.name,n.style.backgroundColor=t.color,e(t.color)?(n.style.color="white",A.style.color="white",console.log(A.style.color)):(n.style.color="black",A.style.color="black",console.log(A.style.color)))}else console.error("Could not find category with ID:",J);A.innerHTML=catTitle.value,console.log(C.value),A.style.backgroundColor=C.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);U.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),c.style.display="none"})),h.addEventListener("click",(function(e){e.preventDefault(),c.style.display="none"})),A.addEventListener("click",(function(){J=parseInt(this.dataset.catId),X="edit",function(e,t){let n=document.getElementById("catTitle"),o=document.getElementById("colorDisplay");n.value=e.textContent,o.style.backgroundColor=e.style.backgroundColor,c.style.display="block"}(A)})),B.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(B.style.backgroundColor);C.value=e,C.click()})),C.addEventListener("input",(function(){B.style.background=C.value})),R.classList.add("selectedFilter"),O.classList.add("selectedFilter"),n(R),o(_,W),D.addEventListener("click",(function(){_=Y,O=D,j(_,O),x.textContent=this.textContent})),b.addEventListener("click",(function(){const e=new Date;e.setDate(Y.getDate()+7),_=e,O=b,j(_,O),x.textContent=this.textContent})),w.addEventListener("click",(function(){const e=new Date;e.setDate(Y.getDate()+30),_=e,O=w,j(_,O),x.textContent=this.textContent})),L.addEventListener("click",(function(){_=null,O=L,j(_,O),x.textContent=this.textContent})),$=document.querySelectorAll(".catBtns"),$.forEach((e=>{e.addEventListener("click",(function(){W=this.textContent,J=parseInt(this.dataset.catId),V(W)}))})),r.addEventListener("click",(function(){const e=window.getComputedStyle(a).display;window.innerWidth<750?"none"===e?(a.style.display="block",a.style.zIndex="2",s.style.gridColumn="1 / 3",s.classList.add("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png"):"none"===e?(a.style.display="block",a.style.zIndex="",s.style.gridColumn="2/3",s.classList.remove("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png")})),S.onclick=function(){i.style.display="none",delete M.dataset.editingTaskId},T.onclick=function(){c.style.display="none"},window.onclick=function(e){e.target==i?i.style.display="none":e.target==c&&(c.style.display="none")},q.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),k.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,