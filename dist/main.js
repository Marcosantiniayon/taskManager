(()=>{"use strict";function e(){const e=new Date;return e.setHours(0,0,0,0),e}function t(e){let t;return t=e.startsWith("#")?{r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)}:e,Math.round((299*t.r+587*t.g+114*t.b)/1e3)<170}function n(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function l(e){let t=window.getComputedStyle(e),n=t.backgroundColor,l=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=l}function o(){thisWeekBtn.classList.remove("selectedFilter"),thisMonthBtn.classList.remove("selectedFilter"),allBtn.classList.remove("selectedFilter"),todayBtn.classList.remove("selectedFilter")}function s(e,t,l){document.querySelectorAll(".taskContainerDiv").forEach((l=>{const o=function(e){for(const t of V){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(l.querySelector(".taskDiv").dataset.taskId),s=new Date(n(o.dueDate));s.setHours(0,0,0,0);const a=o.category;!(null===e||s<=e)||"All Inbox"!==t&&a.name!==t?l.style.display="none":l.style.display="block"})),pageTitle.textContent=t,pageTitle.dataset.catId=l}const a=document.querySelector(".content"),d=document.querySelector("nav"),i=document.querySelector("#modal"),c=document.querySelector("#catModal"),r=document.querySelector(".tasksContainer"),u=document.getElementById("collapseBtn"),m=document.getElementById("createTask"),g=document.getElementById("okTaskBtn"),y=document.getElementById("cancelTaskBtn"),p=document.getElementById("delete"),k=document.getElementById("newCatBtn"),v=document.getElementById("okCatBtn"),f=document.getElementById("cancelCatBtn"),E=(document.getElementById("inboxBtn"),document.getElementById("responsibilitiesBtn"),document.getElementById("eventsBtn"),document.getElementById("programmingBtn"),document.getElementById("colorPicker")),I=document.getElementById("colorDisplay"),h=document.getElementById("allBtn"),C=document.getElementById("todayBtn"),B=document.getElementById("thisWeekBtn"),L=document.getElementById("thisMonthBtn"),b=document.getElementById("pageTimeline");let w=document.getElementsByClassName("close")[0],D=document.getElementsByClassName("closeCatModal")[0],x=document.querySelector("form"),T=document.getElementById("pageTitle"),S=document.getElementById("title"),q=document.getElementById("category"),F=document.getElementById("dueDate"),M=document.getElementById("priority"),A=document.getElementById("description"),$=document.querySelectorAll(".catBtns"),N=document.getElementById("inboxBtn"),H="All Inbox",P=e();function z(){$=document.querySelectorAll(".catBtns"),$.forEach((e=>{e.addEventListener("click",(function(){$.forEach((e=>{e.classList.remove("selectedFilter")})),this.classList.add("selectedFilter"),H=this.textContent,Y=parseInt(this.dataset.catId),l(this),s(P,H,Y)}))}))}class W{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++_}addTaskToCat(e){this.tasks.push(e),e.id=G,G++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let Y,_=Math.max(...Array.from($).map((e=>parseInt(e.dataset.catId)))),O=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>_&&(_=t),new W(e.textContent.trim(),null,t)}))}(),V=[...O],j=null,G=0;class J{constructor(e,t,n,l,o,s){this.id=e,this.title=t,this.category=n,this.dueDate=l,this.priority=o,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return i.style.display="none",void delete S.dataset.editingTaskId;let t,n,l=document.getElementById(e);if(!l)return console.error(`No task div found with id ${e}`),void delete S.dataset.editingTaskId;for(let l of V)if(t=l.tasks.find((t=>t.id==e)),t){n=l;break}n.removeTaskFromCat(e),G--,G=V.reduce(((e,t)=>e+t.tasks.length),0),l.parentNode.parentNode.remove(),i.style.display="none",delete S.dataset.editingTaskId}m.addEventListener("click",(function(){S.value="",q.value="All Inbox";let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),l=e.getFullYear();e=l+"-"+n+"-"+t,F.value=e,M.value="Low",A.value="",i.style.display="block"})),y.addEventListener("click",(function(e){e.preventDefault(),i.style.display="none"})),g.addEventListener("click",(function(t){if(document.querySelector("form").reportValidity()){t.preventDefault(),S.classList.remove("error");let l=document.getElementById("title").value,o=document.getElementById("category").value,a=document.getElementById("category").value,d=V.find((e=>e.name===a)),c=document.getElementById("dueDate").value,u=document.getElementById("priority").value,m=document.getElementById("description").value;S.dataset.editingTaskId?function(e,t,l,o,a){let d,c=S.dataset.editingTaskId;for(let e of V)if(d=e.tasks.find((e=>e.id==c)),d)break;if(void 0===d)return void console.error(`No task found with id ${c}`);d.title=e,d.category=t,d.dueDate=l,d.priority=o,d.description=a,console.log("editing task, title: "+e+" id: "+c);let r=document.getElementById(c);r.querySelector(".taskTitle").textContent=e,r.querySelector(".taskCategory").textContent=`(${t.name})`,r.querySelector(".taskDueDate").textContent=n(l),r.querySelector(".symbol").src="Highest"==o?"./images/warning-333.png":"High"==o?"./images/warning-222.png":"Medium"==o?"./images/warning-111.png":"./images/warning_grey.png",delete S.dataset.editingTaskId,i.style.display="none",s(P,H)}(l,d,c,u,m):function(t,l,o,a,d,c){let u=new J(G,t,o,a,d,c);G++,console.log(o),o.addTaskToCat(u);let m=u.id;const g=document.createElement("div");function y(e){console.log(e),S.value=e.title,q.value=e.category.name,F.value=e.dueDate,M.value=e.priority,A.value=e.description,S.dataset.editingTaskId=e.id,i.style.display="block"}g.classList.add("taskContainerDiv"),function(t,l,o,s,a,d){const i=document.createElement("div");i.classList.add("taskBigDiv");const c=document.createElement("div");c.classList.add("taskDiv"),c.id=t,c.dataset.taskId=t,c.addEventListener("click",(function(){y(u)}));const m=document.createElement("div");m.classList.add("taskPrim"),c.appendChild(m);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),E.classList.add("complete"),I.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),E.classList.remove("complete"),I.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=l;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+o+")",m.appendChild(p),m.appendChild(k),m.appendChild(v);const f=document.createElement("div");f.classList.add("taskSec"),c.appendChild(f);const E=document.createElement("div");E.classList.add("taskDueDate"),E.textContent=n(s);const I=document.createElement("div");I.classList.add("taskDueDate");const h=document.createElement("img");"Highest"==d.value?h.src="./images/warning-333.png":"High"==d.value?h.src="./images/warning-222.png":"Medium"==d.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),I.appendChild(h);const C=document.createElement("img");C.id=t,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),f.appendChild(E),f.appendChild(I),i.appendChild(c),i.appendChild(C);const B=document.createElement("hr");g.appendChild(i),g.appendChild(B),r.appendChild(g)}(m,t,l,a,0,M),s(P,H)}(l,o,d,c,u,m),i.style.display="none"}else S.classList.add("error");N=q.value,console.log(N),l(document.querySelector(`#${N}`))})),p.addEventListener("click",(function(t){t.stopPropagation();let n=S.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),S.addEventListener("input",(function(){this.classList.remove("error")}))}(),k.addEventListener("click",(function(){j="new",c.style.display="block",catTitle.value="",I.style.backgroundColor="#8a59b9"})),v.addEventListener("click",(function(e){e.preventDefault();let n=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(I.style.backgroundColor);if(I.style.background=n,E.value=n,"new"===j){let e=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value,l=new W(e,n);V.push(l);let o=document.createElement("li"),s=document.createElement("button");s.innerText=e,s.id=e,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=l.catId,t(n)?s.style.color="white":s.style.color="black",o.appendChild(s),document.getElementById("categoriesList").appendChild(o),z()}else if("edit"===j){console.log(Y),"number"!=typeof Y&&console.error("catId is not a number at [description of the code location]",Y);let e=V.find((e=>e.catId===Y));if(e){e.name=document.getElementById("catTitle").value,e.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${Y}"]`);n&&(n.innerText=e.name,n.style.backgroundColor=e.color,t(e.color)?(n.style.color="white",T.style.color="white",console.log(T.style.color)):(n.style.color="black",T.style.color="black",console.log(T.style.color)))}else console.error("Could not find category with ID:",Y);T.innerHTML=catTitle.value,console.log(E.value),T.style.backgroundColor=E.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);V.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),c.style.display="none"})),f.addEventListener("click",(function(){})),T.addEventListener("click",(function(){Y=parseInt(this.dataset.catId),j="edit",function(e,t){let n=document.getElementById("catTitle"),l=document.getElementById("colorDisplay");n.value=e.textContent,l.style.backgroundColor=e.style.backgroundColor,c.style.display="block"}(T)})),I.addEventListener("click",(function(){console.log(I.style.backgroundColor),E.click()})),E.addEventListener("input",(function(){I.style.background=E.value})),N.classList.add("selectedFilter"),l(N),document.getElementById("allBtn").classList.add("selectedFilter"),C.addEventListener("click",(function(){const t=e();P=t,s(P,H),o(),C.classList.add("selectedFilter"),b.textContent=this.textContent})),B.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+7),P=n,s(P,H),o(),B.classList.add("selectedFilter"),b.textContent=this.textContent})),L.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+30),P=n,s(P,H),o(),L.classList.add("selectedFilter"),b.textContent=this.textContent})),h.addEventListener("click",(function(){P=null,s(P,H),o(),h.classList.add("selectedFilter"),b.textContent=this.textContent,h.classList.add("selectedFilter")})),z(),u.addEventListener("click",(function(){const e=window.getComputedStyle(d).display;window.innerWidth<750?"none"===e?(d.style.display="block",d.style.zIndex="2",a.style.gridColumn="1 / 3",a.classList.add("overlay"),u.src="./images/collapse3.png"):(d.style.display="none",d.style.zIndex="",a.style.gridColumn="1 / -1",a.classList.remove("overlay"),console.log("expand"),u.src="./images/expand3.png"):"none"===e?(d.style.display="block",d.style.zIndex="",a.style.gridColumn="2/3",a.classList.remove("overlay"),u.src="./images/collapse3.png"):(d.style.display="none",d.style.zIndex="",a.style.gridColumn="1 / -1",a.classList.remove("overlay"),console.log("expand"),u.src="./images/expand3.png")})),w.onclick=function(){i.style.display="none",delete S.dataset.editingTaskId},D.onclick=function(){c.style.display="none"},window.onclick=function(e){e.target==i?i.style.display="none":e.target==c&&(c.style.display="none")},x.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),g.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MkUsSUFBTSwyQkFHbEIvRSxFQUFJbEMsTUFBTThCLFFBQVUsT0FDcEJJLEVBQUlsQyxNQUFNaUssT0FBUyxHQUNuQmhJLEVBQVFqQyxNQUFNa0ssV0FBYSxTQUMzQmpJLEVBQVE5QixVQUFVQyxPQUFPLFdBQ3pCNEYsUUFBUWdCLElBQUksVUFDWjFFLEVBQVkyRSxJQUFNLHdCQUlJLFNBQXBCOEMsR0FDRjdILEVBQUlsQyxNQUFNOEIsUUFBVSxRQUNwQkksRUFBSWxDLE1BQU1pSyxPQUFTLEdBQ25CaEksRUFBUWpDLE1BQU1rSyxXQUFhLE1BQzNCakksRUFBUTlCLFVBQVVDLE9BQU8sV0FDekJrQyxFQUFZMkUsSUFBTSwyQkFHbEIvRSxFQUFJbEMsTUFBTThCLFFBQVUsT0FDcEJJLEVBQUlsQyxNQUFNaUssT0FBUyxHQUNuQmhJLEVBQVFqQyxNQUFNa0ssV0FBYSxTQUMzQmpJLEVBQVE5QixVQUFVQyxPQUFPLFdBQ3pCNEYsUUFBUWdCLElBQUksVUFDWjFFLEVBQVkyRSxJQUFNLHVCQUl4QixJQUNGL0QsRUFBS2lILFFBQVUsV0FDWGhJLEVBQU1uQyxNQUFNOEIsUUFBVSxjQUNmdUIsRUFBVzVCLFFBQVFvRSxhQUM5QixFQUNBekMsRUFBYStHLFFBQVUsV0FDbkIvSCxFQUFTcEMsTUFBTThCLFFBQVUsTUFDN0IsRUFDQXBDLE9BQU95SyxRQUFVLFNBQVN6RCxHQUNsQkEsRUFBTTBELFFBQVVqSSxFQUNsQkEsRUFBTW5DLE1BQU04QixRQUFVLE9BQ2Q0RSxFQUFNMEQsUUFBVWhJLElBQ3RCQSxFQUFTcEMsTUFBTThCLFFBQVUsT0FFakMsRUFDQSxFQUFLaUMsaUJBQWlCLFdBQVcsU0FBUzJDLEdBQ3BCLFVBQWRBLEVBQU0yRCxNQUNOM0QsRUFBTUMsaUJBQ05sRSxFQUFVa0gsUUFFbEIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rhc2ttYW5hZ2VyLy4vc3JjL2hlbHBlckZ1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlci8uL3NyYy9kaXNwbGF5RnVuY3Rpb25zLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VyLy4vc3JjL2RvbUVsZW1lbnRzLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VyLy4vc3JjL2NhdGVnb3J5RnVuY3Rpb25zLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VyLy4vc3JjL3Rhc2tGdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZXIvLi9zcmMvaW5kZXgzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50RGF0ZSgpeyBcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7IC8vIFNldCBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kcyB0byAwIHRvIGNvbXBhcmUgb25seSB0aGUgZGF0ZXNcbiAgICByZXR1cm4gdG9kYXk7XG4gIH1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhcmtDb2xvcihjb2xvcikge1xuICAvLyBDb252ZXJ0IGhleCBjb2xvciB0byByZ2JcbiAgbGV0IHJnYjtcbiAgaWYgKGNvbG9yLnN0YXJ0c1dpdGgoJyMnKSkge1xuICAgICAgbGV0IHIgPSBwYXJzZUludChjb2xvci5zbGljZSgxLCAzKSwgMTYpO1xuICAgICAgbGV0IGcgPSBwYXJzZUludChjb2xvci5zbGljZSgzLCA1KSwgMTYpO1xuICAgICAgbGV0IGIgPSBwYXJzZUludChjb2xvci5zbGljZSg1LCA3KSwgMTYpO1xuICAgICAgcmdiID0geyByLCBnLCBiIH07XG4gIH0gZWxzZSB7XG4gICAgICAvLyBBc3N1bWUgaXQncyBhbHJlYWR5IGFuIHJnYiBjb2xvclxuICAgICAgcmdiID0gY29sb3I7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgYnJpZ2h0bmVzcyBvbiBhIHNjYWxlIGZyb20gMCB0byAyNTVcbiAgbGV0IGJyaWdodG5lc3MgPSBNYXRoLnJvdW5kKCgocmdiLnIgKiAyOTkpICsgKHJnYi5nICogNTg3KSArIChyZ2IuYiAqIDExNCkpIC8gMTAwMCk7XG4gIFxuICByZXR1cm4gYnJpZ2h0bmVzcyA8IDE3MDsgLy8gUmV0dXJuIHRydWUgaWYgdGhlIGNvbG9yIGlzIGRhcmtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlRm9ySW5wdXQoZGF0ZVN0cmluZykge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cmluZyk7XG4gIGNvbnN0IG9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTsgLy8gR2V0IHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWludXRlc1xuICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgKyBvZmZzZXQpOyAvLyBBZGp1c3QgdGhlIGRhdGUgYnkgdGhlIHRpbWV6b25lIG9mZnNldFxuICBjb25zdCBtbSA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICBjb25zdCBkZCA9IFN0cmluZyhkYXRlLmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgY29uc3QgeXl5eSA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgcmV0dXJuIGAke21tfS8ke2RkfS8ke3l5eXl9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChyZ2IpIHtcbiAgLy8gU2VwYXJhdGUgUkdCIHZhbHVlc1xuICBsZXQgdmFsdWVzID0gcmdiLm1hdGNoKC9ecmdiXFwoKFxcZCspLFxccyooXFxkKyksXFxzKihcXGQrKVxcKSQvKTtcblxuICAvLyBDb252ZXJ0IGVhY2ggdmFsdWUgdG8gaGV4YWRlY2ltYWxcbiAgbGV0IGhleENvbG9yID0gXCIjXCIgKyAoXCIwXCIgKyBwYXJzZUludCh2YWx1ZXNbMV0sIDEwKS50b1N0cmluZygxNikpLnNsaWNlKC0yKSArXG4gICAgICAgICAgICAgICAgICAgIChcIjBcIiArIHBhcnNlSW50KHZhbHVlc1syXSwgMTApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpICtcbiAgICAgICAgICAgICAgICAgICAgKFwiMFwiICsgcGFyc2VJbnQodmFsdWVzWzNdLCAxMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG5cbiAgcmV0dXJuIGhleENvbG9yO1xufVxuICAiLCJpbXBvcnQgeyBjYXRlZ29yaWVzIH0gZnJvbSBcIi4vY2F0ZWdvcnlGdW5jdGlvbnNcIjtcbmltcG9ydCB7IGZvcm1hdERhdGVGb3JJbnB1dCB9IGZyb20gXCIuL2hlbHBlckZ1bmN0aW9uc1wiO1xuLy8gaW1wb3J0IHsgY3VycmVudENhdGVnb3J5IH0gZnJvbSBcIi4vZG9tRWxlbWVudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclBhZ2VDaGFuZ2VzKGNhdGVnb3J5QnV0dG9uKXtcbiAgICBsZXQgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNhdGVnb3J5QnV0dG9uKTtcbiAgICBsZXQgYmdDb2xvciA9IGNvbXB1dGVkU3R5bGUuYmFja2dyb3VuZENvbG9yO1xuICAgIGxldCBmb250Q29sb3IgPSBjb21wdXRlZFN0eWxlLmNvbG9yO1xuICAgIHBhZ2VUaXRsZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBiZ0NvbG9yO1xuICAgIHBhZ2VUaXRsZS5zdHlsZS5jb2xvciA9IGZvbnRDb2xvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZpbHRlcnMoKXtcbiAgICB0aGlzV2Vla0J0bi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZEZpbHRlcicpO1xuICAgIHRoaXNNb250aEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZEZpbHRlcicpO1xuICAgIGFsbEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZEZpbHRlcicpO1xuICAgIHRvZGF5QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkRmlsdGVyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJUYXNrc0J5RGF0ZUFuZENhdGVnb3J5KGVuZERhdGUsIHNlbGVjdGVkQ2F0ZWdvcnksIGNhdElEKSB7XG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0YXNrQ29udGFpbmVyRGl2IGVsZW1lbnRzIGFuZCBjaGVjayB0aGVpciB0YXNrcycgZHVlIGRhdGVzXG4gICAgY29uc3QgYWxsVGFza0NvbnRhaW5lckRpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFza0NvbnRhaW5lckRpdicpO1xuICAgIGFsbFRhc2tDb250YWluZXJEaXZzLmZvckVhY2goKHRhc2tDb250YWluZXJEaXYpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0RpdiA9IHRhc2tDb250YWluZXJEaXYucXVlcnlTZWxlY3RvcignLnRhc2tEaXYnKTsgLy8gR2V0IHRoZSB0YXNrRGl2IGluc2lkZSB0aGUgY3VycmVudCB0YXNrQ29udGFpbmVyRGl2XG4gICAgICAgIGNvbnN0IHRhc2tJZCA9IHRhc2tEaXYuZGF0YXNldC50YXNrSWQ7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBnZXRUYXNrQnlJZCh0YXNrSWQpOyAvLyBSZXRyaWV2ZSB0aGUgdGFzayBvYmplY3QgYnkgSURcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFzaydzIGR1ZSBkYXRlIGlzIGJldHdlZW4gc3RhcnREYXRlIGFuZCBlbmREYXRlXG4gICAgICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gbmV3IERhdGUoZm9ybWF0RGF0ZUZvcklucHV0KHRhc2suZHVlRGF0ZSkpO1xuICAgICAgICB0YXNrRHVlRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFzaydzIGNhdGVnb3J5IG1hdGNoZXMgdGhlIHNlbGVjdGVkIGNhdGVnb3J5XG4gICAgICAgIGNvbnN0IHRhc2tDYXRlZ29yeSA9IHRhc2suY2F0ZWdvcnk7XG5cbiAgICAgICAgaWYgKChlbmREYXRlID09PSBudWxsIHx8IHRhc2tEdWVEYXRlIDw9IGVuZERhdGUpICYmIChzZWxlY3RlZENhdGVnb3J5ID09PSBcIkFsbCBJbmJveFwiIHx8IHRhc2tDYXRlZ29yeS5uYW1lID09PSBzZWxlY3RlZENhdGVnb3J5KSkge1xuICAgICAgICAgICAgLy8gU2hvdyB0aGUgdGFza0NvbnRhaW5lckRpdiBpZiBpdHMgZHVlIGRhdGUgaXMgYmV0d2VlbiBzdGFydERhdGUgYW5kIGVuZERhdGUsIGFuZCBjYXRlZ29yeSBtYXRjaGVzXG4gICAgICAgICAgICB0YXNrQ29udGFpbmVyRGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSGlkZSB0aGUgdGFza0NvbnRhaW5lckRpdiBpZiBpdHMgZHVlIGRhdGUgaXMgb3V0c2lkZSB0aGUgcmFuZ2Ugb3IgY2F0ZWdvcnkgZG9lc24ndCBtYXRjaFxuICAgICAgICAgICAgdGFza0NvbnRhaW5lckRpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGFza0J5SWQodGFza0lkKSB7XG4gICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBjYXRlZ29yeVxuICAgICAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeSBvZiBjYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgIC8vIEZpbmQgdGhlIHRhc2sgaW4gdGhlIGNhdGVnb3J5J3MgdGFza3MgYXJyYXkgd2l0aCB0aGUgbWF0Y2hpbmcgSURcbiAgICAgICAgICAgICAgY29uc3QgdGFzayA9IGNhdGVnb3J5LnRhc2tzLmZpbmQoKHRhc2spID0+IHRhc2suaWQgPT0gdGFza0lkKTtcbiAgICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFzazsgLy8gUmV0dXJuIHRoZSB0YXNrIGlmIGZvdW5kXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBSZXR1cm4gbnVsbCBpZiBubyB0YXNrIHdpdGggdGhlIGdpdmVuIElEIGlzIGZvdW5kXG4gICAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy9hcHBseSBwYWdlIHRpdGxlIGJhc2VkIG9uIGNhdGVncnlcbiAgICBwYWdlVGl0bGUudGV4dENvbnRlbnQgPSBzZWxlY3RlZENhdGVnb3J5O1xuICAgIHBhZ2VUaXRsZS5kYXRhc2V0LmNhdElkID0gY2F0SUQ7XG4gIH07IiwiaW1wb3J0IHsgVGFzaywgdGFza0NvdW50ZXIgfSBmcm9tIFwiLi90YXNrRnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50RGF0ZSwgZm9ybWF0RGF0ZUZvcklucHV0LCBpc0RhcmtDb2xvciwgcmdiVG9IZXggfSBmcm9tIFwiLi9oZWxwZXJGdW5jdGlvbnNcIjtcbmltcG9ydCB7IGZpbHRlclBhZ2VDaGFuZ2VzLCByZW1vdmVGaWx0ZXJzLCBmaWx0ZXJUYXNrc0J5RGF0ZUFuZENhdGVnb3J5IH0gZnJvbSBcIi4vZGlzcGxheUZ1bmN0aW9uc1wiO1xuaW1wb3J0IHsgQ2F0ZWdvcnksIGNhdGVnb3JpZXMsIGNhdElELCBjdXJyZW50TW9kZSB9IGZyb20gXCIuL2NhdGVnb3J5RnVuY3Rpb25zXCI7XG5cblxuY29uc3QgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50Jyk7XG5jb25zdCBuYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCduYXYnKTtcbmNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21vZGFsJyk7XG5jb25zdCBjYXRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYXRNb2RhbCcpO1xuY29uc3QgdGFza3NDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza3NDb250YWluZXInKTtcbmNvbnN0IGNvbGxhcHNlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbGxhcHNlQnRuJyk7XG5jb25zdCBjcmVhdGVUYXNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NyZWF0ZVRhc2snKTtcbmNvbnN0IG9rVGFza0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdva1Rhc2tCdG4nKVxuY29uc3QgY2FuY2VsVGFza0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW5jZWxUYXNrQnRuJyk7XG5jb25zdCBkZWxldGVCdG5Nb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWxldGUnKTtcbmNvbnN0IG5ld0NhdEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdDYXRCdG4nKTtcbmNvbnN0IG9rQ2F0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29rQ2F0QnRuJyk7XG5jb25zdCBjYW5jZWxDYXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsQ2F0QnRuJyk7XG5jb25zdCBpbmJveEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmJveEJ0bicpXG5jb25zdCByZXNwb25zaWJpbGl0aWVzQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3BvbnNpYmlsaXRpZXNCdG4nKTtcbmNvbnN0IGV2ZW50c0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdldmVudHNCdG4nKTtcbmNvbnN0IHByb2dyYW1taW5nQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyYW1taW5nQnRuJyk7XG5jb25zdCBjb2xvclBpY2tlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xvclBpY2tlcicpO1xuY29uc3QgY29sb3JEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbG9yRGlzcGxheScpO1xuY29uc3QgYWxsQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FsbEJ0bicpO1xuY29uc3QgdG9kYXlCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9kYXlCdG4nKTtcbmNvbnN0IHRoaXNXZWVrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RoaXNXZWVrQnRuJyk7XG5jb25zdCB0aGlzTW9udGhCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGhpc01vbnRoQnRuJyk7XG5jb25zdCBwYWdlVGltZWxpbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFnZVRpbWVsaW5lJyk7XG5sZXQgc3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjbG9zZVwiKVswXTtcbmxldCBzcGFuQ2F0TW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2xvc2VDYXRNb2RhbFwiKVswXTtcbmxldCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xubGV0IHBhZ2VUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWdlVGl0bGUnKTtcblxubGV0IHRpdGxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpXG5sZXQgY2F0ZWdvcnlTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhdGVnb3J5XCIpO1xubGV0IGR1ZURhdGVTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImR1ZURhdGVcIik7XG5sZXQgcHJpb3JpdHlTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByaW9yaXR5XCIpO1xubGV0IGRlc2NyaXB0aW9uSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlc2NyaXB0aW9uXCIpO1xubGV0IGNhdGVnb3J5QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXRCdG5zJyk7XG5cbmxldCBjdXJyZW50Q2F0ZWdvcnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5ib3hCdG4nKTtcbmxldCBzZWxlY3RlZENhdGVnb3J5ID0gXCJBbGwgSW5ib3hcIjtcbmxldCBzZWxlY3RlZEVuZERhdGUgPSBnZXRDdXJyZW50RGF0ZSgpO1xuXG5leHBvcnQge1xuICBjb250ZW50LCBuYXYsbW9kYWwsc3BhbixjYXRNb2RhbCwgc3BhbkNhdE1vZGFsLHRhc2tzQ29udGFpbmVyLGZvcm0scGFnZVRpdGxlLGNvbGxhcHNlQnRuLGNyZWF0ZVRhc2tCdG4sb2tUYXNrQnRuLGNhbmNlbFRhc2tCdG4sZGVsZXRlQnRuTW9kYWwsbmV3Q2F0QnRuLG9rQ2F0QnRuLGNhbmNlbENhdEJ0bixpbmJveEJ0bixyZXNwb25zaWJpbGl0aWVzQnRuLGV2ZW50c0J0bixwcm9ncmFtbWluZ0J0bix0aXRsZUlucHV0LGNhdGVnb3J5U2VsZWN0LGR1ZURhdGVTZWxlY3QscHJpb3JpdHlTZWxlY3QsZGVzY3JpcHRpb25JbnB1dCxjYXRlZ29yeUJ1dHRvbnMsYWxsQnRuLCB0b2RheUJ0biwgdGhpc1dlZWtCdG4sIHRoaXNNb250aEJ0biwgcGFnZVRpbWVsaW5lLCBjb2xvclBpY2tlciwgY29sb3JEaXNwbGF5ICBcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplVGFza0V2ZW50TGlzdGVuZXJzKCl7XG4gIGNyZWF0ZVRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsgLy8gQnJpbmdzIHVwIG5ldyB0YXNrIG1vZGFsIFxuICAgICAgLy8gU2V0IGRlZmF1bHQgaW5wdXRzXG4gICAgICB0aXRsZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgIGNhdGVnb3J5U2VsZWN0LnZhbHVlID0gXCJBbGwgSW5ib3hcIjtcbiAgICAgIGxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICBsZXQgZGQgPSBTdHJpbmcodG9kYXkuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgbGV0IG1tID0gU3RyaW5nKHRvZGF5LmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgbGV0IHl5eXkgPSB0b2RheS5nZXRGdWxsWWVhcigpO1xuICAgICAgXG4gICAgICAvLyBGb3JtYXQgdGhlIGRhdGUgYXMgXCJtbS1kZC15eXl5XCJcbiAgICAgIHRvZGF5ID0geXl5eSArICctJyArIG1tICsgJy0nICsgZGQ7XG4gICAgICBkdWVEYXRlU2VsZWN0LnZhbHVlID0gdG9kYXlcbiAgICAgIFxuICAgICAgcHJpb3JpdHlTZWxlY3QudmFsdWUgPSBcIkxvd1wiO1xuICAgICAgZGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IFwiXCI7XG4gIFxuICAgICAgLy8gU2hvdyB0aGUgbW9kYWxcbiAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gIH0pO1xuICBjYW5jZWxUYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgdGhlIGZvcm0gZnJvbSBzdWJtaXR0aW5nXG4gICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIH0pO1xuICBva1Rhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkgeyAvL0NhbGxzIGFkZFRhc2sgb3IgZWRpdFRhc2tcbiAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJykucmVwb3J0VmFsaWRpdHkoKSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGl0bGVJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEFzc2lnbiBwcm9wZXJ0eSB2YWx1ZXMgYmFzZWQgb2ZmIGlucHV0c1xuICAgICAgICAgIGxldCB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVcIikudmFsdWU7XG4gICAgICAgICAgbGV0IGNhdGVnb3J5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXRlZ29yeVwiKS52YWx1ZTtcbiAgICAgICAgICBsZXQgY2F0ZWdvcnlWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2F0ZWdvcnlcIikudmFsdWU7XG4gICAgICAgICAgbGV0IGNhdGVnb3J5T2JqZWN0ID0gY2F0ZWdvcmllcy5maW5kKGNhdGVnb3J5ID0+IGNhdGVnb3J5Lm5hbWUgPT09IGNhdGVnb3J5VmFsdWUpO1xuICAgICAgICAgIGxldCBkdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkdWVEYXRlXCIpLnZhbHVlO1xuICAgICAgICAgIGxldCBpbXBvcnRhbmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmlvcml0eVwiKS52YWx1ZTtcbiAgICAgICAgICBsZXQgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlc2NyaXB0aW9uXCIpLnZhbHVlO1xuICAgICAgXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgY3JlYXRpbmcgYSBuZXcgdGFzayBvciB1cGRhdGluZyBhbiBleGlzdGluZyBvbmVcbiAgICAgICAgICBpZiAodGl0bGVJbnB1dC5kYXRhc2V0LmVkaXRpbmdUYXNrSWQpIHtcbiAgICAgICAgICAgICAgZWRpdFRhc2sodGl0bGUsIGNhdGVnb3J5T2JqZWN0LCBkdWVEYXRlLCBpbXBvcnRhbmNlLCBkZXNjcmlwdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYWRkVGFzayh0aXRsZSwgY2F0ZWdvcnksIGNhdGVnb3J5T2JqZWN0LCBkdWVEYXRlLCBpbXBvcnRhbmNlLCBkZXNjcmlwdGlvbik7XG4gICAgICAgICAgfVxuICBcbiAgICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBcbiAgICAgICAgICB9IGVsc2UgeyB0aXRsZUlucHV0LmNsYXNzTGlzdC5hZGQoJ2Vycm9yJyk7IH1cbiAgICAgIFxuICAgICAgICAgIGZ1bmN0aW9uIGFkZFRhc2sodGl0bGUsIGNhdGVnb3J5LCBjYXRlZ29yeU9iamVjdCwgZHVlRGF0ZSwgaW1wb3J0YW5jZSwgZGVzY3JpcHRpb24pe1xuICAgICAgICAgICAgICAvLyBDcmVhdGUgVGFzayBPYmplY3QgXG4gICAgICAgICAgICAgIGxldCBuZXdUYXNrID0gbmV3IFRhc2sodGFza0NvdW50ZXIsIHRpdGxlLCBjYXRlZ29yeU9iamVjdCwgZHVlRGF0ZSwgaW1wb3J0YW5jZSwgZGVzY3JpcHRpb24pO1xuICAgICAgICAgIFxuICAgICAgICAgICAgICB0YXNrQ291bnRlcisrO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjYXRlZ29yeU9iamVjdCk7XG4gICAgICAgICAgICAgIGNhdGVnb3J5T2JqZWN0LmFkZFRhc2tUb0NhdChuZXdUYXNrKTtcbiAgICAgICAgICAgICAgbGV0IHRhc2tJZCA9IG5ld1Rhc2suaWRcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIENvbnRhaW5lciBkaXYgZm9yIHRoZSB0YXNrIGFuZCB0aGUgbGluZSBicmVha1xuICAgICAgICAgICAgICBjb25zdCB0YXNrQ29udGFpbmVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgIHRhc2tDb250YWluZXJEaXYuY2xhc3NMaXN0LmFkZCgndGFza0NvbnRhaW5lckRpdicpO1xuICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBBZGQgVGFzayBEaXZcbiAgICAgICAgICAgICAgZnVuY3Rpb24gYWRkVGFza0Rpdih0YXNrSWQsIHRpdGxlLCBjYXRlZ29yeSwgZHVlRGF0ZSwgdGFza0NvdW50ZXIsIHByaW9yaXR5U2VsZWN0KXtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tCaWdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgIHRhc2tCaWdEaXYuY2xhc3NMaXN0LmFkZCgndGFza0JpZ0RpdicpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdGFza0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgdGFza0Rpdi5jbGFzc0xpc3QuYWRkKCd0YXNrRGl2Jyk7XG4gICAgICAgICAgICAgICAgICB0YXNrRGl2LmlkID0gdGFza0lkO1xuICAgICAgICAgICAgICAgICAgdGFza0Rpdi5kYXRhc2V0LnRhc2tJZCA9IHRhc2tJZDtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIHRhc2tEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvcGVuVGFza01vZGFsRm9yRWRpdGluZyhuZXdUYXNrKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdGFza1ByaW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICB0YXNrUHJpbS5jbGFzc0xpc3QuYWRkKCd0YXNrUHJpbScpO1xuICAgICAgICAgICAgICAgICAgdGFza0Rpdi5hcHBlbmRDaGlsZCh0YXNrUHJpbSk7XG4gICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrVGl0bGUuY2xhc3NMaXN0LmFkZCgnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NhdGVnb3J5LmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEdWVEYXRlLmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tQcmlvcml0eS5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1RpdGxlLmNsYXNzTGlzdC5yZW1vdmUoJ2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrQ2F0ZWdvcnkuY2xhc3NMaXN0LnJlbW92ZSgnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0R1ZURhdGUuY2xhc3NMaXN0LnJlbW92ZSgnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1ByaW9yaXR5LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFza1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tUaXRsZS5jbGFzc0xpc3QuYWRkKCd0YXNrVGl0bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1RpdGxlLnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFza0NhdGVnb3J5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tDYXRlZ29yeS5jbGFzc0xpc3QuYWRkKCd0YXNrQ2F0ZWdvcnknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0NhdGVnb3J5LnRleHRDb250ZW50ID0gXCIoXCIgKyBjYXRlZ29yeSArIFwiKVwiO1xuICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIHRhc2tQcmltLmFwcGVuZENoaWxkKGNoZWNrYm94KTt0YXNrUHJpbS5hcHBlbmRDaGlsZCh0YXNrVGl0bGUpO3Rhc2tQcmltLmFwcGVuZENoaWxkKHRhc2tDYXRlZ29yeSk7XG4gICAgICAgICAgXG4gICAgICAgICAgICAgICAgICBjb25zdCB0YXNrU2VjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgdGFza1NlYy5jbGFzc0xpc3QuYWRkKCd0YXNrU2VjJyk7XG4gICAgICAgICAgICAgICAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRhc2tTZWMpO1xuICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEdWVEYXRlLmNsYXNzTGlzdC5hZGQoJ3Rhc2tEdWVEYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEdWVEYXRlLnRleHRDb250ZW50ID0gZm9ybWF0RGF0ZUZvcklucHV0KGR1ZURhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tQcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrUHJpb3JpdHkuY2xhc3NMaXN0LmFkZCgndGFza0R1ZURhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXNrUHJpb3JpdHlJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZihwcmlvcml0eVNlbGVjdC52YWx1ZSA9PSBcIkhpZ2hlc3RcIil7dGFza1ByaW9yaXR5SW1nLnNyYyA9IFwiLi9pbWFnZXMvd2FybmluZy0zMzMucG5nXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwcmlvcml0eVNlbGVjdC52YWx1ZSA9PSBcIkhpZ2hcIil7dGFza1ByaW9yaXR5SW1nLnNyYyA9IFwiLi9pbWFnZXMvd2FybmluZy0yMjIucG5nXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwcmlvcml0eVNlbGVjdC52YWx1ZSA9PSBcIk1lZGl1bVwiKXt0YXNrUHJpb3JpdHlJbWcuc3JjID0gXCIuL2ltYWdlcy93YXJuaW5nLTExMS5wbmdcIn1cbiAgICAgICAgICAgICAgICAgICAgICBlbHNlIHt0YXNrUHJpb3JpdHlJbWcuc3JjID0gXCIuL2ltYWdlcy93YXJuaW5nX2dyZXkucG5nXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tQcmlvcml0eUltZy5jbGFzc0xpc3QuYWRkKCdzeW1ib2wnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1ByaW9yaXR5LmFwcGVuZENoaWxkKHRhc2tQcmlvcml0eUltZyk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlQnRuQmlnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUJ0bkJpZ0Rpdi5pZCA9IHRhc2tJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQnRuQmlnRGl2LnNyYyA9IFwiLi9pbWFnZXMvZGVsZXRlLnBuZ1wiOyAvLyBDaGFuZ2UgdG8geW91ciBkZWxldGUgaW1hZ2UncyBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUJ0bkJpZ0Rpdi5jbGFzc0xpc3QuYWRkKCdzeW1ib2wnKTtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGVCdG5CaWdEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRhc2tJZCBmcm9tIHRoZSBlZGl0aW5nVGFza0lkIGRhdGEgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YXNrSWQgPSBkZWxldGVCdG5CaWdEaXYuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFza0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTm8gdGFzayBpcyBjdXJyZW50bHkgYmVpbmcgZWRpdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZGVsZXRlVGFzayh0YXNrSWQpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1NlYy5hcHBlbmRDaGlsZCh0YXNrRHVlRGF0ZSk7IHRhc2tTZWMuYXBwZW5kQ2hpbGQodGFza1ByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICB0YXNrQmlnRGl2LmFwcGVuZENoaWxkKHRhc2tEaXYpO3Rhc2tCaWdEaXYuYXBwZW5kQ2hpbGQoZGVsZXRlQnRuQmlnRGl2KTtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVicmVhayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hyJyk7XG4gICAgICAgICAgXG4gICAgICAgICAgICAgICAgICB0YXNrQ29udGFpbmVyRGl2LmFwcGVuZENoaWxkKHRhc2tCaWdEaXYpO3Rhc2tDb250YWluZXJEaXYuYXBwZW5kQ2hpbGQobGluZWJyZWFrKTt0YXNrc0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXNrQ29udGFpbmVyRGl2KTsgICAgXG4gICAgICAgICAgICAgIH0gYWRkVGFza0Rpdih0YXNrSWQsIHRpdGxlLCBjYXRlZ29yeSwgZHVlRGF0ZSwgdGFza0NvdW50ZXIsIHByaW9yaXR5U2VsZWN0KTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGZpbHRlclRhc2tzQnlEYXRlQW5kQ2F0ZWdvcnkoc2VsZWN0ZWRFbmREYXRlLCBzZWxlY3RlZENhdGVnb3J5KTtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgZnVuY3Rpb24gb3BlblRhc2tNb2RhbEZvckVkaXRpbmcodGFzayl7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0YXNrKTtcbiAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZm9ybSBpbnB1dHMgdG8gdGhlIHRhc2sncyB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgIHRpdGxlSW5wdXQudmFsdWUgPSB0YXNrLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlTZWxlY3QudmFsdWUgPSB0YXNrLmNhdGVnb3J5Lm5hbWU7XG4gICAgICAgICAgICAgICAgICBkdWVEYXRlU2VsZWN0LnZhbHVlID0gdGFzay5kdWVEYXRlO1xuICAgICAgICAgICAgICAgICAgcHJpb3JpdHlTZWxlY3QudmFsdWUgPSB0YXNrLnByaW9yaXR5O1xuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHRhc2suZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGF0YSBhdHRyaWJ1dGUgb24gdGhlIHRpdGxlIGlucHV0IHRvIHRoZSB0YXNrJ3MgaWQgc28gd2Uga25vdyB3aGljaCB0YXNrIGlzIGJlaW5nIGVkaXRlZFxuICAgICAgICAgICAgICAgICAgdGl0bGVJbnB1dC5kYXRhc2V0LmVkaXRpbmdUYXNrSWQgPSB0YXNrLmlkO1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAvLyBTaG93IHRoZSBtb2RhbFxuICAgICAgICAgICAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZWRpdFRhc2sodGl0bGUsIGNhdGVnb3J5T2JqZWN0LCBkdWVEYXRlLCBpbXBvcnRhbmNlLCBkZXNjcmlwdGlvbil7XG4gICAgICAgICAgICAgIC8vIEVkaXRpbmcgVGFzayBPYmplY3RcbiAgICAgICAgICAgICAgbGV0IHRhc2tJZCA9IHRpdGxlSW5wdXQuZGF0YXNldC5lZGl0aW5nVGFza0lkO1xuICAgICAgICAgICAgICBsZXQgdGFza09iamVjdDtcbiAgICAgICAgICAgICAgZm9yKGxldCBjYXRlZ29yeSBvZiBjYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgICAgICB0YXNrT2JqZWN0ID0gY2F0ZWdvcnkudGFza3MuZmluZCh0YXNrID0+IHRhc2suaWQgPT0gdGFza0lkKTtcbiAgICAgICAgICAgICAgICAgIGlmKHRhc2tPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodGFza09iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBObyB0YXNrIGZvdW5kIHdpdGggaWQgJHt0YXNrSWR9YCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB0YXNrIG9iamVjdCdzIHZhbHVlc1xuICAgICAgICAgICAgICB0YXNrT2JqZWN0LnRpdGxlID0gdGl0bGU7XG4gICAgICAgICAgICAgIHRhc2tPYmplY3QuY2F0ZWdvcnkgPSBjYXRlZ29yeU9iamVjdDtcbiAgICAgICAgICAgICAgdGFza09iamVjdC5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICAgICAgICAgICAgdGFza09iamVjdC5wcmlvcml0eSA9IGltcG9ydGFuY2U7XG4gICAgICAgICAgICAgIHRhc2tPYmplY3QuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gTG9nIHRoZSB0YXNrSWQgYW5kIHRhc2tEaXYgaGVyZVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZWRpdGluZyB0YXNrLCB0aXRsZTogJyArIHRpdGxlICsgJyBpZDogJyArIHRhc2tJZCk7XG4gICAgICAgICAgICAgIGxldCB0YXNrRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFza0lkKTtcbiAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB0YXNrRGl2J3MgdGV4dENvbnRlbnQgdG8gcmVmbGVjdCB0aGUgbmV3IHZhbHVlc1xuICAgICAgICAgICAgICB0YXNrRGl2LnF1ZXJ5U2VsZWN0b3IoJy50YXNrVGl0bGUnKS50ZXh0Q29udGVudCA9IHRpdGxlO1xuICAgICAgICAgICAgICB0YXNrRGl2LnF1ZXJ5U2VsZWN0b3IoJy50YXNrQ2F0ZWdvcnknKS50ZXh0Q29udGVudCA9IGAoJHtjYXRlZ29yeU9iamVjdC5uYW1lfSlgO1xuICAgICAgICAgICAgICB0YXNrRGl2LnF1ZXJ5U2VsZWN0b3IoJy50YXNrRHVlRGF0ZScpLnRleHRDb250ZW50ID0gZm9ybWF0RGF0ZUZvcklucHV0KGR1ZURhdGUpO1xuICAgICAgICAgICAgICBsZXQgdGFza1ByaW9yaXR5SW1nID0gdGFza0Rpdi5xdWVyeVNlbGVjdG9yKCcuc3ltYm9sJyk7XG4gICAgICAgICAgICAgICAgICBpZihpbXBvcnRhbmNlID09IFwiSGlnaGVzdFwiKXt0YXNrUHJpb3JpdHlJbWcuc3JjID0gXCIuL2ltYWdlcy93YXJuaW5nLTMzMy5wbmdcIn1cbiAgICAgICAgICAgICAgICAgIGVsc2UgaWYoaW1wb3J0YW5jZSA9PSBcIkhpZ2hcIil7dGFza1ByaW9yaXR5SW1nLnNyYyA9IFwiLi9pbWFnZXMvd2FybmluZy0yMjIucG5nXCJ9XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmKGltcG9ydGFuY2UgPT0gXCJNZWRpdW1cIil7dGFza1ByaW9yaXR5SW1nLnNyYyA9IFwiLi9pbWFnZXMvd2FybmluZy0xMTEucG5nXCJ9XG4gICAgICAgICAgICAgICAgICBlbHNlIHt0YXNrUHJpb3JpdHlJbWcuc3JjID0gXCIuL2ltYWdlcy93YXJuaW5nX2dyZXkucG5nXCJ9XG4gICAgICAgICAgXG4gICAgICAgICAgICAgIGRlbGV0ZSB0aXRsZUlucHV0LmRhdGFzZXQuZWRpdGluZ1Rhc2tJZDtcbiAgICAgICAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICBmaWx0ZXJUYXNrc0J5RGF0ZUFuZENhdGVnb3J5KHNlbGVjdGVkRW5kRGF0ZSwgc2VsZWN0ZWRDYXRlZ29yeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRDYXRlZ29yeSA9IGNhdGVnb3J5U2VsZWN0LnZhbHVlO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnRDYXRlZ29yeSk7XG4gICAgICAgICAgZmlsdGVyUGFnZUNoYW5nZXMoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7Y3VycmVudENhdGVnb3J5fWApKTtcblxuICB9KTtcbiAgZGVsZXRlQnRuTW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIFxuICAgICAgLy8gR2V0IHRhc2tJZCBmcm9tIHRoZSBlZGl0aW5nVGFza0lkIGRhdGEgYXR0cmlidXRlXG4gICAgICBsZXQgdGFza0lkID0gdGl0bGVJbnB1dC5kYXRhc2V0LmVkaXRpbmdUYXNrSWQ7XG4gIFxuICAgICAgaWYgKCF0YXNrSWQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnTm8gdGFzayBpcyBjdXJyZW50bHkgYmVpbmcgZWRpdGVkJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICBcbiAgICAgIGRlbGV0ZVRhc2sodGFza0lkKTtcbiAgfSk7ICAvLyAoaW5zaWRlIG1vZGFsKS4gT3V0c2lkZSBtb2RhbCBldiBsaXN0ZW5lciBpcyBpbnNpZGUgYWRkVGFza0RpdiBldmxpc3RlbmVyICdEZWxldGVCdG5CaWdEaXYnXG4gIHRpdGxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgZXJyb3IgY2xhc3Mgd2hlbiB0aGUgdGl0bGUgaW5wdXQgdmFsdWUgY2hhbmdlc1xuICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpO1xuICB9KTtcbiAgZnVuY3Rpb24gZGVsZXRlVGFzayh0YXNrSWQpIHtcbiAgICAgIGlmICghY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIHRhc2s/JykpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgdXNlciBjYW5jZWxzLCBqdXN0IGNsb3NlIHRoZSBtb2RhbFxuICAgICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICBkZWxldGUgdGl0bGVJbnB1dC5kYXRhc2V0LmVkaXRpbmdUYXNrSWQ7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICBcbiAgICAgIGxldCB0YXNrRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFza0lkKTtcbiAgICAgIGlmICghdGFza0Rpdikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE5vIHRhc2sgZGl2IGZvdW5kIHdpdGggaWQgJHt0YXNrSWR9YCk7XG4gICAgICAgICAgZGVsZXRlIHRpdGxlSW5wdXQuZGF0YXNldC5lZGl0aW5nVGFza0lkO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgXG4gICAgICAvLyBGaW5kIHRoZSB0YXNrIG9iamVjdCB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoaXMgdGFza0lkXG4gICAgICBsZXQgdGFza09iamVjdDtcbiAgICAgIGxldCB0YXNrQ2F0ZWdvcnk7XG4gICAgICBmb3IgKGxldCBjYXRlZ29yeSBvZiBjYXRlZ29yaWVzKSB7XG4gICAgICAgICAgdGFza09iamVjdCA9IGNhdGVnb3J5LnRhc2tzLmZpbmQoKHRhc2spID0+IHRhc2suaWQgPT0gdGFza0lkKTtcbiAgICAgICAgICBpZiAodGFza09iamVjdCkge1xuICAgICAgICAgICAgICB0YXNrQ2F0ZWdvcnkgPSBjYXRlZ29yeTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIC8vIFJlbW92ZSB0aGUgdGFzayBmcm9tIHRoZSBjYXRlZ29yeSdzIHRhc2tzIGFycmF5XG4gICAgICB0YXNrQ2F0ZWdvcnkucmVtb3ZlVGFza0Zyb21DYXQodGFza0lkKTtcbiAgXG4gICAgICAvLyBVcGRhdGUgdGhlIHRhc2tDb3VudGVyXG4gICAgICB0YXNrQ291bnRlci0tO1xuICBcbiAgICAgIC8vIFVwZGF0ZSB0aGUgdGFza0NvdW50ZXJcbiAgICAgIHRhc2tDb3VudGVyID0gY2F0ZWdvcmllcy5yZWR1Y2UoKGNvdW50LCBjYXRlZ29yeSkgPT4gY291bnQgKyBjYXRlZ29yeS50YXNrcy5sZW5ndGgsIDApO1xuICBcbiAgICAgIC8vIERlbGV0ZSB0aGUgdGFza0NvbnRhaW5lckRpdlxuICAgICAgbGV0IHRhc2tDb250YWluZXJEaXYgPSB0YXNrRGl2LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgIHRhc2tDb250YWluZXJEaXYucmVtb3ZlKCk7IC8vIFJlbW92ZSB0YXNrQ29udGFpbmVyRGl2XG4gIFxuICAgICAgLy8gSGlkZSB0aGUgbW9kYWxcbiAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgXG4gICAgICAvLyBDbGVhciB0aGUgZWRpdGluZ1Rhc2tJZCBzaW5jZSB3ZSd2ZSBqdXN0IGRlbGV0ZWQgdGhlIHRhc2tcbiAgICAgIGRlbGV0ZSB0aXRsZUlucHV0LmRhdGFzZXQuZWRpdGluZ1Rhc2tJZDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVDYXRFdmVudExpc3RlbmVycygpe1xuICBuZXdDYXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGN1cnJlbnRNb2RlID0gJ25ldyc7XG4gICAgICBjYXRNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgY2F0VGl0bGUudmFsdWUgPSBcIlwiO1xuICAgICAgY29sb3JEaXNwbGF5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjOGE1OWI5JztcblxuICAgfSk7XG4gICBva0NhdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCB0aGUgZm9ybSBmcm9tIHN1Ym1pdHRpbmdcbiAgIFxuICAgICAgIC8vIEdldCB0aGUgUkdCIGNvbG9yICYgY29udmVydCB0byBoZXguIFRoZW4gc2V0IHRoZSBjb2xvclBpY2tlciB2YWx1ZSB0byB0aGUgaGV4XG4gICAgICAgIGxldCByZ2JDb2xvciA9IGNvbG9yRGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGxldCBoZXhDb2xvciA9IHJnYlRvSGV4KHJnYkNvbG9yKTtcbiAgICAgICAgY29sb3JEaXNwbGF5LnN0eWxlLmJhY2tncm91bmQgPSBoZXhDb2xvcjtcbiAgICAgICAgY29sb3JQaWNrZXIudmFsdWUgPSBoZXhDb2xvcjtcblxuICAgICAgIGlmIChjdXJyZW50TW9kZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgLy8gR2V0IHRoZSBjYXRlZ29yeSBuYW1lIGFuZCBjb2xvciBmcm9tIHRoZSBmb3JtIGlucHV0c1xuICAgICAgICAgICBsZXQgY2F0VGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2F0VGl0bGUnKS52YWx1ZTtcbiAgICAgICAgICAgbGV0IGNhdENvbG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbG9yUGlja2VyJykudmFsdWU7XG4gICBcbiAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGNhdGVnb3J5IGluc3RhbmNlXG4gICAgICAgICAgIGxldCBuZXdDYXRlZ29yeSA9IG5ldyBDYXRlZ29yeShjYXRUaXRsZSwgY2F0Q29sb3IpO1xuICAgICAgICAgICBjYXRlZ29yaWVzLnB1c2gobmV3Q2F0ZWdvcnkpO1xuICAgXG4gICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBsaXN0IGl0ZW1cbiAgICAgICAgICAgbGV0IG5ld0NhdGVnb3J5RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgIGxldCBuZXdCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgbmV3QnV0dG9uLmlubmVyVGV4dCA9IGNhdFRpdGxlO1xuICAgICAgICAgICBuZXdCdXR0b24uaWQgPSBjYXRUaXRsZTtcbiAgICAgICAgICAgbmV3QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2NhdEJ0bnMnKTtcbiAgICAgICAgICAgbmV3QnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNhdENvbG9yO1xuICAgICAgICAgICBuZXdCdXR0b24uZGF0YXNldC5jYXRJZCA9IG5ld0NhdGVnb3J5LmNhdElkO1xuICAgXG4gICAgICAgICAgIGlmIChpc0RhcmtDb2xvcihjYXRDb2xvcikpIHtcbiAgICAgICAgICAgICAgIG5ld0J1dHRvbi5zdHlsZS5jb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICBuZXdCdXR0b24uc3R5bGUuY29sb3IgPSAnYmxhY2snO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIFxuICAgICAgICBuZXdDYXRlZ29yeUVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3QnV0dG9uKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhdGVnb3JpZXNMaXN0JykuYXBwZW5kQ2hpbGQobmV3Q2F0ZWdvcnlFbGVtZW50KTtcbiAgICAgICAgaW5pdGlhbGl6ZUNhdEZpbHRlckV2TGlzdGVuZXJzKCk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50TW9kZSA9PT0gJ2VkaXQnKSB7XG4gICAgICAgICAgIC8vUmV0cmlldmUgdGhlIGNhdGVnb3J5IGZyb20gdGhlIGNhdGVnb3JpZXMgYXJyYXkgYmFzZWQgb24gdGhlIGNhdElEXG4gICAgICAgICAgIGNvbnNvbGUubG9nKGNhdElEKTtcbiAgICAgICAgICAgaWYgKHR5cGVvZiBjYXRJRCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignY2F0SWQgaXMgbm90IGEgbnVtYmVyIGF0IFtkZXNjcmlwdGlvbiBvZiB0aGUgY29kZSBsb2NhdGlvbl0nLCBjYXRJRCk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgbGV0IGVkaXRpbmdDYXRlZ29yeSA9IGNhdGVnb3JpZXMuZmluZChjYXQgPT4gY2F0LmNhdElkID09PSBjYXRJRCk7XG4gICAgICAgXG4gICAgICAgICAgIC8vVXBkYXRlIHRoZSBjYXRlZ29yeSB2YWx1ZXNcbiAgICAgICAgICAgaWYgKGVkaXRpbmdDYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgZWRpdGluZ0NhdGVnb3J5Lm5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2F0VGl0bGUnKS52YWx1ZTtcbiAgICAgICAgICAgICAgIGVkaXRpbmdDYXRlZ29yeS5jb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xvclBpY2tlcicpLnZhbHVlO1xuICAgICAgIFxuICAgICAgICAgICAgICAgLy9VcGRhdGUgdGhlIFVJIGVsZW1lbnQgKGJ1dHRvbiBpbiB0aGlzIGNhc2UpIHJlcHJlc2VudGluZyB0aGUgY2F0ZWdvcnlcbiAgICAgICAgICAgICAgIGxldCBhc3NvY2lhdGVkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYnV0dG9uW2RhdGEtY2F0LWlkPVwiJHtjYXRJRH1cIl1gKTtcbiAgICAgICAgICAgICAgIGlmIChhc3NvY2lhdGVkQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZEJ1dHRvbi5pbm5lclRleHQgPSBlZGl0aW5nQ2F0ZWdvcnkubmFtZTtcbiAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGVkQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGVkaXRpbmdDYXRlZ29yeS5jb2xvcjtcbiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAvL0NoZWNrIGNvbG9yIGJyaWdodG5lc3MgdG8gYWRqdXN0IHRleHQgY29sb3IgZm9yIGJldHRlciB2aXNpYmlsaXR5XG4gICAgICAgICAgICAgICAgICAgaWYgKGlzRGFya0NvbG9yKGVkaXRpbmdDYXRlZ29yeS5jb2xvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZEJ1dHRvbi5zdHlsZS5jb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZS5zdHlsZS5jb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhZ2VUaXRsZS5zdHlsZS5jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZEJ1dHRvbi5zdHlsZS5jb2xvciA9ICdibGFjayc7XG4gICAgICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZS5zdHlsZS5jb2xvciA9ICdibGFjayc7XG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhZ2VUaXRsZS5zdHlsZS5jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ291bGQgbm90IGZpbmQgY2F0ZWdvcnkgd2l0aCBJRDonLCBjYXRJRCk7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAvL1VwZGF0ZSBwYWdlIHRpdGxlXG4gICAgICAgICAgIHBhZ2VUaXRsZS5pbm5lckhUTUwgPSBjYXRUaXRsZS52YWx1ZTtcbiAgICAgICAgICAgY29uc29sZS5sb2coY29sb3JQaWNrZXIudmFsdWUpO1xuICAgICAgICAgICBwYWdlVGl0bGUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3JQaWNrZXIudmFsdWU7XG4gICAgICAgfVxuICAgICAgIHVwZGF0ZUNhdGVnb3J5RHJvcGRvd24oKTtcbiAgICAgIC8vICBmaWx0ZXJCdG5zRXZMaXN0ZW5lcnMoKTtcbiAgIFxuICAgICAgIGNhdE1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgIFxuICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNhdGVnb3J5RHJvcGRvd24oKSB7XG4gICAgICAgICAgIC8vIENsZWFyIGFueSBleGlzdGluZyBvcHRpb25zXG4gICAgICAgICAgIGxldCBjYXRlZ29yeVNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXRlZ29yeScpO1xuICAgICAgICAgICB3aGlsZSAoY2F0ZWdvcnlTZWxlY3QuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgY2F0ZWdvcnlTZWxlY3QucmVtb3ZlQ2hpbGQoY2F0ZWdvcnlTZWxlY3QuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgLy8gQWRkIG5ldyBvcHRpb25zIGJhc2VkIG9uIHRoZSBjYXRlZ29yaWVzIGFycmF5XG4gICAgICAgICAgIGNhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSBjYXRlZ29yeS5uYW1lO1xuICAgICAgICAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gY2F0ZWdvcnkubmFtZTtcbiAgICAgICAgICAgICAgIGNhdGVnb3J5U2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgICAgIH0pO1xuICAgICAgIH1cbiAgIH0pO1xuICAgY2FuY2VsQ2F0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7ICAgIFxuICAgfSk7XG4gICBwYWdlVGl0bGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgIGNhdElEID0gcGFyc2VJbnQodGhpcy5kYXRhc2V0LmNhdElkKTtcbiAgICAgICBjdXJyZW50TW9kZSA9ICdlZGl0JztcbiAgICAgICBvcGVuQ2F0TW9kYWxGb3JFZGl0aW5nKHBhZ2VUaXRsZSwgY2F0SUQpO1xuICAgICAgIGZ1bmN0aW9uIG9wZW5DYXRNb2RhbEZvckVkaXRpbmcocGFnZVRpdGxlLCBjYXRJRCl7XG4gICAgICAgICAgIGxldCBjYXRUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXRUaXRsZScpO1xuICAgICAgICAgICBsZXQgY29sb3JEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbG9yRGlzcGxheScpO1xuICAgICAgIFxuICAgICAgICAgICAvLyBTZXQgdGhlIGZvcm0gaW5wdXRzIHRvIHRoZSB0YXNrJ3MgdmFsdWVzXG4gICAgICAgICAgIGNhdFRpdGxlLnZhbHVlID0gcGFnZVRpdGxlLnRleHRDb250ZW50O1xuICAgICAgICAgICBjb2xvckRpc3BsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcGFnZVRpdGxlLnN0eWxlLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgXG4gICAgICAgICAgIC8vIFNob3cgdGhlIG1vZGFsXG4gICAgICAgICAgIGNhdE1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgfVxuICAgfSk7XG4gICBjb2xvckRpc3BsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmxvZyhjb2xvckRpc3BsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yKTtcbiAgICBjb2xvclBpY2tlci5jbGljaygpO1xuICAgICAgXG4gICAgfSk7XG4gICBjb2xvclBpY2tlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uKCkgeyAgICAgLy8gV2hlbiB5b3UgcGljayBhIGNvbG9yLCB1cGRhdGUgdGhlIGRpc3BsYXlcbiAgICAgIGNvbG9yRGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3JQaWNrZXIudmFsdWU7XG4gICAgfSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVEZWZhdWx0RmlsdGVycygpe1xuICBjdXJyZW50Q2F0ZWdvcnkuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWRGaWx0ZXInKVxuICBmaWx0ZXJQYWdlQ2hhbmdlcyhjdXJyZW50Q2F0ZWdvcnkpO1xuICBsZXQgY3VycmVudFRpbWVsaW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FsbEJ0bicpO1xuICBjdXJyZW50VGltZWxpbmUuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWRGaWx0ZXInKVxufTtcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplVGltZUZpbHRlckV2TGlzdGVuZXJzKCl7XG4gIC8vVGltZWxpbmUgYnV0dG9ucyBldmVudCBsaXN0ZW5lcnNcbiAgdG9kYXlCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdG9kYXkgPSBnZXRDdXJyZW50RGF0ZSgpO1xuICAgIHNlbGVjdGVkRW5kRGF0ZSA9IHRvZGF5O1xuICAgIGZpbHRlclRhc2tzQnlEYXRlQW5kQ2F0ZWdvcnkoc2VsZWN0ZWRFbmREYXRlLCBzZWxlY3RlZENhdGVnb3J5KTtcbiAgICByZW1vdmVGaWx0ZXJzKCk7XG4gICAgdG9kYXlCdG4uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWRGaWx0ZXInKTtcbiAgICBwYWdlVGltZWxpbmUudGV4dENvbnRlbnQgPSB0aGlzLnRleHRDb250ZW50O1xuXG59KTtcbiAgdGhpc1dlZWtCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB0b2RheSA9IGdldEN1cnJlbnREYXRlKCk7XG4gICAgICBjb25zdCBvbmVXZWVrTGF0ZXIgPSBuZXcgRGF0ZSgpO1xuICAgICAgb25lV2Vla0xhdGVyLnNldERhdGUodG9kYXkuZ2V0RGF0ZSgpICsgNyk7XG4gICAgICBzZWxlY3RlZEVuZERhdGUgPSBvbmVXZWVrTGF0ZXI7XG4gICAgICBmaWx0ZXJUYXNrc0J5RGF0ZUFuZENhdGVnb3J5KHNlbGVjdGVkRW5kRGF0ZSwgc2VsZWN0ZWRDYXRlZ29yeSk7XG4gICAgICByZW1vdmVGaWx0ZXJzKCk7XG4gICAgICB0aGlzV2Vla0J0bi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZEZpbHRlcicpO1xuICAgICAgcGFnZVRpbWVsaW5lLnRleHRDb250ZW50ID0gdGhpcy50ZXh0Q29udGVudDtcbiAgfSk7XG4gIHRoaXNNb250aEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHRvZGF5ID0gZ2V0Q3VycmVudERhdGUoKTtcbiAgICAgIGNvbnN0IG9uZU1vbnRoTGF0ZXIgPSBuZXcgRGF0ZSgpO1xuICAgICAgb25lTW9udGhMYXRlci5zZXREYXRlKHRvZGF5LmdldERhdGUoKSArIDMwKTtcbiAgICAgIHNlbGVjdGVkRW5kRGF0ZSA9IG9uZU1vbnRoTGF0ZXI7XG4gICAgICBmaWx0ZXJUYXNrc0J5RGF0ZUFuZENhdGVnb3J5KHNlbGVjdGVkRW5kRGF0ZSwgc2VsZWN0ZWRDYXRlZ29yeSk7XG4gICAgICByZW1vdmVGaWx0ZXJzKCk7XG4gICAgICB0aGlzTW9udGhCdG4uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWRGaWx0ZXInKTtcbiAgICAgIHBhZ2VUaW1lbGluZS50ZXh0Q29udGVudCA9IHRoaXMudGV4dENvbnRlbnQ7XG4gIH0pO1xuICBhbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxlY3RlZEVuZERhdGUgPSBudWxsO1xuICAgICAgZmlsdGVyVGFza3NCeURhdGVBbmRDYXRlZ29yeShzZWxlY3RlZEVuZERhdGUsIHNlbGVjdGVkQ2F0ZWdvcnkpXG4gICAgICByZW1vdmVGaWx0ZXJzKCk7XG4gICAgICBhbGxCdG4uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWRGaWx0ZXInKTtcbiAgICAgIHBhZ2VUaW1lbGluZS50ZXh0Q29udGVudCA9IHRoaXMudGV4dENvbnRlbnQ7XG4gICAgICBhbGxCdG4uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWRGaWx0ZXInKTtcblxuICB9KTtcbn07XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNhdEZpbHRlckV2TGlzdGVuZXJzKCl7XG4gIC8vUmVzZWxlY3QgY2F0ZWdvcnkgYnV0dG9ucyB0byBwaWNrIHVwIGFueSBuZXdseSBhZGRlZCBvbmUgIFxuICBjYXRlZ29yeUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2F0QnRucycpOyBcbiAgY2F0ZWdvcnlCdXR0b25zLmZvckVhY2goKGNhdEJ0bikgPT4ge1xuICAgIGNhdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBSZW1vdmUgJ3NlbGVjdGVkRmlsdGVyJyBjbGFzcyBmcm9tIGFsbCBjYXRlZ29yeSBidXR0b25zXG4gICAgICAgIGNhdGVnb3J5QnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZEZpbHRlcicpO1xuICAgICAgICB9KTtcbiAgXG4gICAgICAgIC8vIEFkZCAnc2VsZWN0ZWRGaWx0ZXInIGNsYXNzIHRvIHRoZSBjbGlja2VkIGJ1dHRvblxuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkRmlsdGVyJyk7XG4gIFxuICAgICAgICAvLyBTZXQgc2VsZWN0ZWRDYXRlZ29yeSB0byB0aGUgY2xpY2tlZCBidXR0b24ncyB0ZXh0IGNvbnRlbnRcbiAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeSA9IHRoaXMudGV4dENvbnRlbnQ7XG4gICAgICAgIGNhdElEID0gcGFyc2VJbnQodGhpcy5kYXRhc2V0LmNhdElkKTtcbiAgXG4gICAgICAgIC8vIFNldCBzdHlsaW5nIHRvIHBhZ2UgdGl0bGVcbiAgICAgICAgZmlsdGVyUGFnZUNoYW5nZXModGhpcyk7XG4gICAgICAgIC8vIEFwcGx5IHRoZSBmaWx0ZXJcbiAgICAgICAgZmlsdGVyVGFza3NCeURhdGVBbmRDYXRlZ29yeShzZWxlY3RlZEVuZERhdGUsIHNlbGVjdGVkQ2F0ZWdvcnksIGNhdElEKTtcbiAgICB9KTtcbiAgfSk7IFxufVxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVEaXNwbGF5U2V0dGluZ3MoKXtcbiAgY29sbGFwc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsgLy8gTmF2IENvbGxhcHNlICYgRXhwYW5kXG4gICAgICBjb25zdCBuYXZEaXNwbGF5U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShuYXYpLmRpc3BsYXk7XG4gICAgICBjb25zdCBzY3JlZW5XaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY29uc3QgaXNTbWFsbFNjcmVlbiA9IHNjcmVlbldpZHRoIDwgNzUwO1xuICAgIFxuICAgICAgaWYgKGlzU21hbGxTY3JlZW4pIHtcbiAgICAgICAgaWYgKG5hdkRpc3BsYXlTdHlsZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgbmF2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgIG5hdi5zdHlsZS56SW5kZXggPSAnMic7XG4gICAgICAgICAgY29udGVudC5zdHlsZS5ncmlkQ29sdW1uID0gJzEgLyAzJztcbiAgICAgICAgICBjb250ZW50LmNsYXNzTGlzdC5hZGQoJ292ZXJsYXknKTtcbiAgICAgICAgICBjb2xsYXBzZUJ0bi5zcmMgPSAnLi9pbWFnZXMvY29sbGFwc2UzLnBuZyc7XG4gICAgICAgIC8vICAgY29sbGFwc2VCdG4uc3R5bGUubWFyZ2luTGVmdCA9ICcxNDBweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmF2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgbmF2LnN0eWxlLnpJbmRleCA9ICcnO1xuICAgICAgICAgIGNvbnRlbnQuc3R5bGUuZ3JpZENvbHVtbiA9ICcxIC8gLTEnO1xuICAgICAgICAgIGNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmxheScpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdleHBhbmQnKTtcbiAgICAgICAgICBjb2xsYXBzZUJ0bi5zcmMgPSAnLi9pbWFnZXMvZXhwYW5kMy5wbmcnO1xuICAgICAgICAvLyAgIGNvbGxhcHNlQnRuLnN0eWxlLm1hcmdpbkxlZnQgPSAnMTJweCc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuYXZEaXNwbGF5U3R5bGUgPT09ICdub25lJykge1xuICAgICAgICAgIG5hdi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICBuYXYuc3R5bGUuekluZGV4ID0gJyc7XG4gICAgICAgICAgY29udGVudC5zdHlsZS5ncmlkQ29sdW1uID0gJzIvMyc7XG4gICAgICAgICAgY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdvdmVybGF5Jyk7XG4gICAgICAgICAgY29sbGFwc2VCdG4uc3JjID0gJy4vaW1hZ2VzL2NvbGxhcHNlMy5wbmcnO1xuICAgICAgICAvLyAgIGNvbGxhcHNlQnRuLnN0eWxlLm1hcmdpbkxlZnQgPSAnMjQwcHgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5hdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIG5hdi5zdHlsZS56SW5kZXggPSAnJztcbiAgICAgICAgICBjb250ZW50LnN0eWxlLmdyaWRDb2x1bW4gPSAnMSAvIC0xJztcbiAgICAgICAgICBjb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoJ292ZXJsYXknKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXhwYW5kJyk7XG4gICAgICAgICAgY29sbGFwc2VCdG4uc3JjID0gJy4vaW1hZ2VzL2V4cGFuZDMucG5nJztcbiAgICAgICAgLy8gICBjb2xsYXBzZUJ0bi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzEycHgnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIHNwYW4ub25jbGljayA9IGZ1bmN0aW9uKCkgeyAvLyBDbG9zZXMgbW9kYWwgb24gY2xpY2tpbmcgWFxuICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgZGVsZXRlIHRpdGxlSW5wdXQuZGF0YXNldC5lZGl0aW5nVGFza0lkO1xuICB9OyBcbiAgc3BhbkNhdE1vZGFsLm9uY2xpY2sgPSBmdW5jdGlvbigpIHsgLy8gQ2xvc2VzIGNhdG1vZGFsIG9uIGNsaWNraW5nIFhcbiAgICAgIGNhdE1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgfSAgICAgXG4gIHdpbmRvdy5vbmNsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHsgLy8gQ2xvc2VzIE1vZGFscyB3aGVuIGNsaWNraW5nIG91dHNpZGUgb2YgaXQgXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09IG1vZGFsKSB7XG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIH0gZWxzZSBpZihldmVudC50YXJnZXQgPT0gY2F0TW9kYWwpIHtcbiAgICAgICAgICBjYXRNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cbiAgfVxuICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihldmVudCkgeyAvLyBFbnRlciBhY3RzIGFzIGEgY2xpY2tcbiAgICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IFxuICAgICAgICAgIG9rVGFza0J0bi5jbGljaygpOyBcbiAgICAgIH1cbiAgfSk7XG4gIFxufVxuXG5cblxuIiwiaW1wb3J0IHtjYXRlZ29yeUJ1dHRvbnN9IGZyb20gJy4vZG9tRWxlbWVudHMnO1xuaW1wb3J0IHsgdGFza0NvdW50ZXIgfSBmcm9tICcuL3Rhc2tGdW5jdGlvbnMnO1xuXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnkge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGNvbG9yLCBjYXRJZCA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLnRhc2tzID0gW107XG4gICAgICAgIHRoaXMuY2F0SWQgPSBjYXRJZCB8fCArK2xhc3RDYXRJZDtcbiAgICB9XG4gICAgYWRkVGFza1RvQ2F0KHRhc2spIHtcbiAgICAgICAgdGhpcy50YXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAvLyBTZXQgdGhlIHRhc2sncyBJRCB0byBtYXRjaCB0aGUgY29ycmVjdCBjb3VudGVyIHZhbHVlXG4gICAgICAgIHRhc2suaWQgPSB0YXNrQ291bnRlcjtcbiAgICAgICAgdGFza0NvdW50ZXIrKztcbiAgICB9XG4gICAgcmVtb3ZlVGFza0Zyb21DYXQodGFza0lkKSB7XG4gICAgICAgIHRoaXMudGFza3MgPSB0aGlzLnRhc2tzLmZpbHRlcih0YXNrID0+IHRhc2suaWQgIT09IHRhc2tJZCk7XG4gICAgfVxufVxuXG5sZXQgbGFzdENhdElkID0gTWF0aC5tYXgoLi4uQXJyYXkuZnJvbShjYXRlZ29yeUJ1dHRvbnMpLm1hcChidG4gPT4gcGFyc2VJbnQoYnRuLmRhdGFzZXQuY2F0SWQpKSk7XG5sZXQgZGVmYXVsdENhdGVnb3JpZXMgPSBpbml0aWFsaXplRGVmYXVsdENhdGVnb3JpZXMoKTtcbmxldCBjYXRlZ29yaWVzID0gWy4uLmRlZmF1bHRDYXRlZ29yaWVzXTsgXG5cbi8vQ2hlY2tzIGlmIHdlIGFyZSBlZGRpdGluZyBvciBjcmVhdGluZyBhIG5ldyBjYXQgIFxubGV0IGN1cnJlbnRNb2RlID0gbnVsbDtcbmxldCBjYXRJRDtcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZURlZmF1bHRDYXRlZ29yaWVzKCkge1xuICAgIGNvbnN0IGNhdGVnb3J5QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXRlZ29yaWVzRGl2IGJ1dHRvbicpO1xuICAgIGxldCBjYXRlZ29yaWVzID0gQXJyYXkuZnJvbShjYXRlZ29yeUJ1dHRvbnMpLm1hcChidXR0b24gPT4ge1xuICAgICAgICBsZXQgY2F0SWQgPSBwYXJzZUludChidXR0b24uZGF0YXNldC5jYXRJZCk7IFxuICAgICAgICBpZiAoY2F0SWQgPiBsYXN0Q2F0SWQpIGxhc3RDYXRJZCA9IGNhdElkO1xuICAgICAgICByZXR1cm4gbmV3IENhdGVnb3J5KGJ1dHRvbi50ZXh0Q29udGVudC50cmltKCksIG51bGwsIGNhdElkKTsgLy8gUGFzc2luZyBjYXRJZCB0byB0aGUgY29uc3RydWN0b3JcbiAgICB9KTtcblxuICAgIHJldHVybiBjYXRlZ29yaWVzO1xufSBcblxuZXhwb3J0IHtjYXRlZ29yaWVzLCBjYXRJRCwgY3VycmVudE1vZGV9OyIsImltcG9ydCB7IGNhdGVnb3JpZXMgfSBmcm9tICcuL2NhdGVnb3J5RnVuY3Rpb25zJztcblxubGV0IHRhc2tDb3VudGVyID0gMDtcblxuZXhwb3J0IGNsYXNzIFRhc2sge1xuICAgIGNvbnN0cnVjdG9yKGlkLCB0aXRsZSwgY2F0ZWdvcnlPYmplY3QsIGR1ZURhdGUsIHByaW9yaXR5LCBkZXNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5jYXRlZ29yeSA9IGNhdGVnb3J5T2JqZWN0XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmNvbXBsZXRlID0gZmFsc2U7IFxuICAgIH1cbiAgICB0b2dnbGVDb21wbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSA9ICF0aGlzLmNvbXBsZXRlO1xuICAgIH1cbn1cblxuZXhwb3J0IHt0YXNrQ291bnRlcn07XG5cblxuIiwiaW1wb3J0IHtUYXNrfSBmcm9tJy4vdGFza0Z1bmN0aW9ucyc7XG5pbXBvcnQge0NhdGVnb3J5fSBmcm9tJy4vY2F0ZWdvcnlGdW5jdGlvbnMnO1xuaW1wb3J0IHtpbml0aWFsaXplVGFza0V2ZW50TGlzdGVuZXJzLCBpbml0aWFsaXplQ2F0RXZlbnRMaXN0ZW5lcnMsIGluaXRpYWxpemVEZWZhdWx0RmlsdGVycywgaW5pdGlhbGl6ZVRpbWVGaWx0ZXJFdkxpc3RlbmVycywgaW5pdGlhbGl6ZUNhdEZpbHRlckV2TGlzdGVuZXJzLCBpbml0aWFsaXplRGlzcGxheVNldHRpbmdzIH0gZnJvbSAnLi9kb21FbGVtZW50cyc7XG5pbXBvcnQge2NvbnRlbnQsIG5hdixtb2RhbCxzcGFuLGNhdE1vZGFsLHNwYW5DYXRNb2RhbCx0YXNrc0NvbnRhaW5lcixmb3JtLHBhZ2VUaXRsZSxjb2xsYXBzZUJ0bixjcmVhdGVUYXNrQnRuLG9rVGFza0J0bixjYW5jZWxUYXNrQnRuLGRlbGV0ZUJ0bk1vZGFsLG5ld0NhdEJ0bixva0NhdEJ0bixjYW5jZWxDYXRCdG4saW5ib3hCdG4scmVzcG9uc2liaWxpdGllc0J0bixldmVudHNCdG4scHJvZ3JhbW1pbmdCdG4sdGl0bGVJbnB1dCxjYXRlZ29yeVNlbGVjdCxkdWVEYXRlU2VsZWN0LHByaW9yaXR5U2VsZWN0LGRlc2NyaXB0aW9uSW5wdXQsY2F0ZWdvcnlCdXR0b25zLGFsbEJ0biwgdG9kYXlCdG4sIHRoaXNXZWVrQnRuLCB0aGlzTW9udGhCdG4sIHBhZ2VUaW1lbGluZSwgY29sb3JQaWNrZXIsIGNvbG9yRGlzcGxheX0gZnJvbSAnLi9kb21FbGVtZW50cyc7XG4vLyBsZXQgdGFza0NvdW50ZXIgPSAwO1xuXG5pbml0aWFsaXplVGFza0V2ZW50TGlzdGVuZXJzKCk7XG5pbml0aWFsaXplQ2F0RXZlbnRMaXN0ZW5lcnMoKTtcbmluaXRpYWxpemVEZWZhdWx0RmlsdGVycygpO1xuaW5pdGlhbGl6ZVRpbWVGaWx0ZXJFdkxpc3RlbmVycygpO1xuaW5pdGlhbGl6ZUNhdEZpbHRlckV2TGlzdGVuZXJzKCk7XG5pbml0aWFsaXplRGlzcGxheVNldHRpbmdzKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ0FURUdPUklFUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4iXSwibmFtZXMiOlsiZ2V0Q3VycmVudERhdGUiLCJ0b2RheSIsIkRhdGUiLCJzZXRIb3VycyIsImlzRGFya0NvbG9yIiwiY29sb3IiLCJyZ2IiLCJzdGFydHNXaXRoIiwiciIsInBhcnNlSW50Iiwic2xpY2UiLCJnIiwiYiIsIk1hdGgiLCJyb3VuZCIsImZvcm1hdERhdGVGb3JJbnB1dCIsImRhdGVTdHJpbmciLCJkYXRlIiwib2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsIlN0cmluZyIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJnZXREYXRlIiwiZ2V0RnVsbFllYXIiLCJmaWx0ZXJQYWdlQ2hhbmdlcyIsImNhdGVnb3J5QnV0dG9uIiwiY29tcHV0ZWRTdHlsZSIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJiZ0NvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiZm9udENvbG9yIiwicGFnZVRpdGxlIiwic3R5bGUiLCJyZW1vdmVGaWx0ZXJzIiwidGhpc1dlZWtCdG4iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJ0aGlzTW9udGhCdG4iLCJhbGxCdG4iLCJ0b2RheUJ0biIsImZpbHRlclRhc2tzQnlEYXRlQW5kQ2F0ZWdvcnkiLCJlbmREYXRlIiwic2VsZWN0ZWRDYXRlZ29yeSIsImNhdElEIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInRhc2tDb250YWluZXJEaXYiLCJ0YXNrIiwidGFza0lkIiwiY2F0ZWdvcnkiLCJjYXRlZ29yaWVzIiwidGFza3MiLCJmaW5kIiwiaWQiLCJnZXRUYXNrQnlJZCIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhc2V0IiwidGFza0R1ZURhdGUiLCJkdWVEYXRlIiwidGFza0NhdGVnb3J5IiwibmFtZSIsImRpc3BsYXkiLCJ0ZXh0Q29udGVudCIsImNhdElkIiwiY29udGVudCIsIm5hdiIsIm1vZGFsIiwiY2F0TW9kYWwiLCJ0YXNrc0NvbnRhaW5lciIsImNvbGxhcHNlQnRuIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVUYXNrQnRuIiwib2tUYXNrQnRuIiwiY2FuY2VsVGFza0J0biIsImRlbGV0ZUJ0bk1vZGFsIiwibmV3Q2F0QnRuIiwib2tDYXRCdG4iLCJjYW5jZWxDYXRCdG4iLCJjb2xvclBpY2tlciIsImNvbG9yRGlzcGxheSIsInBhZ2VUaW1lbGluZSIsInNwYW4iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic3BhbkNhdE1vZGFsIiwidGl0bGVJbnB1dCIsImNhdGVnb3J5U2VsZWN0IiwiZHVlRGF0ZVNlbGVjdCIsInByaW9yaXR5U2VsZWN0IiwiZGVzY3JpcHRpb25JbnB1dCIsImNhdGVnb3J5QnV0dG9ucyIsImN1cnJlbnRDYXRlZ29yeSIsInNlbGVjdGVkRW5kRGF0ZSIsImluaXRpYWxpemVDYXRGaWx0ZXJFdkxpc3RlbmVycyIsImNhdEJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJidXR0b24iLCJ0aGlzIiwiYWRkIiwiQ2F0ZWdvcnkiLCJjb25zdHJ1Y3RvciIsImxhc3RDYXRJZCIsImFkZFRhc2tUb0NhdCIsInB1c2giLCJ0YXNrQ291bnRlciIsInJlbW92ZVRhc2tGcm9tQ2F0IiwiZmlsdGVyIiwibWF4IiwiQXJyYXkiLCJmcm9tIiwibWFwIiwiYnRuIiwiZGVmYXVsdENhdGVnb3JpZXMiLCJ0cmltIiwiaW5pdGlhbGl6ZURlZmF1bHRDYXRlZ29yaWVzIiwiY3VycmVudE1vZGUiLCJUYXNrIiwidGl0bGUiLCJjYXRlZ29yeU9iamVjdCIsInByaW9yaXR5IiwiZGVzY3JpcHRpb24iLCJjb21wbGV0ZSIsInRvZ2dsZUNvbXBsZXRlIiwiZGVsZXRlVGFzayIsImNvbmZpcm0iLCJlZGl0aW5nVGFza0lkIiwidGFza09iamVjdCIsInRhc2tEaXYiLCJjb25zb2xlIiwiZXJyb3IiLCJyZWR1Y2UiLCJjb3VudCIsImxlbmd0aCIsInBhcmVudE5vZGUiLCJ2YWx1ZSIsImRkIiwibW0iLCJ5eXl5IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlcG9ydFZhbGlkaXR5IiwiY2F0ZWdvcnlWYWx1ZSIsImltcG9ydGFuY2UiLCJ1bmRlZmluZWQiLCJsb2ciLCJzcmMiLCJlZGl0VGFzayIsIm5ld1Rhc2siLCJjcmVhdGVFbGVtZW50Iiwib3BlblRhc2tNb2RhbEZvckVkaXRpbmciLCJ0YXNrQmlnRGl2IiwidGFza1ByaW0iLCJhcHBlbmRDaGlsZCIsImNoZWNrYm94IiwidHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsImNoZWNrZWQiLCJ0YXNrVGl0bGUiLCJ0YXNrUHJpb3JpdHkiLCJ0YXNrU2VjIiwidGFza1ByaW9yaXR5SW1nIiwiZGVsZXRlQnRuQmlnRGl2IiwibGluZWJyZWFrIiwiYWRkVGFza0RpdiIsImFkZFRhc2siLCJpbml0aWFsaXplVGFza0V2ZW50TGlzdGVuZXJzIiwiY2F0VGl0bGUiLCJoZXhDb2xvciIsInZhbHVlcyIsIm1hdGNoIiwidG9TdHJpbmciLCJyZ2JUb0hleCIsImJhY2tncm91bmQiLCJjYXRDb2xvciIsIm5ld0NhdGVnb3J5IiwibmV3Q2F0ZWdvcnlFbGVtZW50IiwibmV3QnV0dG9uIiwiaW5uZXJUZXh0IiwiZWRpdGluZ0NhdGVnb3J5IiwiY2F0IiwiYXNzb2NpYXRlZEJ1dHRvbiIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsIm9wdGlvbiIsInVwZGF0ZUNhdGVnb3J5RHJvcGRvd24iLCJvcGVuQ2F0TW9kYWxGb3JFZGl0aW5nIiwiY2xpY2siLCJvbmVXZWVrTGF0ZXIiLCJzZXREYXRlIiwib25lTW9udGhMYXRlciIsIm5hdkRpc3BsYXlTdHlsZSIsImlubmVyV2lkdGgiLCJ6SW5kZXgiLCJncmlkQ29sdW1uIiwib25jbGljayIsInRhcmdldCIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=