(()=>{"use strict";function e(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function t(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function n(e){pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,l=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=l,pageTitle.dataset.catId=e.dataset.catId}function l(e,n){document.querySelectorAll(".taskContainerDiv").forEach((l=>{const o=function(e){for(const t of G){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(l.querySelector(".taskDiv").dataset.taskId),s=new Date(t(o.dueDate));s.setHours(0,0,0,0);const a=o.category;!(null===e||s<=e)||"All Inbox"!==n&&a.name!==n?l.style.display="none":l.style.display="block"}))}const o=document.querySelector(".content"),s=document.querySelector("nav"),a=document.querySelector("#modal"),d=document.querySelector("#catModal"),c=document.querySelector(".tasksContainer"),i=document.getElementById("collapseBtn"),r=document.getElementById("createTask"),u=document.getElementById("okTaskBtn"),m=document.getElementById("cancelTaskBtn"),g=document.getElementById("delete"),y=document.getElementById("newCatBtn"),p=document.getElementById("okCatBtn"),k=document.getElementById("cancelCatBtn"),v=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),f=document.getElementById("colorDisplay"),E=document.getElementById("allBtn"),I=document.getElementById("todayBtn"),h=document.getElementById("thisWeekBtn"),C=document.getElementById("thisMonthBtn"),B=document.getElementById("pageTimeline");let L=document.getElementsByClassName("close")[0],b=document.getElementsByClassName("closeCatModal")[0],D=document.querySelector("form"),w=document.getElementById("pageTitle"),x=document.getElementById("title"),T=document.getElementById("category"),S=document.getElementById("dueDate"),q=document.getElementById("priority"),M=document.getElementById("description"),A=document.querySelectorAll(".catBtns"),F=document.querySelectorAll(".timelineBtns"),N="All Inbox",P=document.getElementById(N),$=null,H=document.getElementById("allBtn");const z=function(){const e=new Date;return e.setHours(0,0,0,0),e}();function W(){A=document.querySelectorAll(".catBtns"),A.forEach((e=>{e.addEventListener("click",(function(){N=this.textContent,R=parseInt(this.dataset.catId),Y(N)}))}))}function Y(e){return A.forEach((e=>{e.classList.remove("selectedFilter")})),P=document.getElementById(e),P.classList.add("selectedFilter"),n(P),l($,e),P}function _(e,t){return console.log(t),F.forEach((e=>{e.classList.remove("selectedFilter")})),n(P),l(e,N),t.classList.add("selectedFilter"),t}class O{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++V}addTaskToCat(e){this.tasks.push(e),e.id=K,K++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let R,V=Math.max(...Array.from(A).map((e=>parseInt(e.dataset.catId)))),j=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>V&&(V=t),new O(e.textContent.trim(),null,t)}))}(),G=[...j],J=null,K=0;class Q{constructor(e,t,n,l,o,s){this.id=e,this.title=t,this.category=n,this.dueDate=l,this.priority=o,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return a.style.display="none",void delete x.dataset.editingTaskId;let t,n,l=document.getElementById(e);if(!l)return console.error(`No task div found with id ${e}`),void delete x.dataset.editingTaskId;for(let l of G)if(t=l.tasks.find((t=>t.id==e)),t){n=l;break}n.removeTaskFromCat(e),K--,K=G.reduce(((e,t)=>e+t.tasks.length),0),l.parentNode.parentNode.remove(),a.style.display="none",delete x.dataset.editingTaskId}r.addEventListener("click",(function(){x.value="",T.value=N;let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),l=e.getFullYear();e=l+"-"+n+"-"+t,S.value=e,q.value="Low",M.value="",a.style.display="block"})),m.addEventListener("click",(function(e){e.preventDefault(),a.style.display="none"})),u.addEventListener("click",(function(l){if(document.querySelector("form").reportValidity()){l.preventDefault(),x.classList.remove("error");let n=document.getElementById("title").value,o=document.getElementById("category").value,s=document.getElementById("category").value,d=G.find((e=>e.name===s)),i=document.getElementById("dueDate").value,r=document.getElementById("priority").value,u=document.getElementById("description").value;x.dataset.editingTaskId?function(e,n,l,o,s){let d,c=x.dataset.editingTaskId;for(let e of G)if(d=e.tasks.find((e=>e.id==c)),d)break;if(void 0===d)return void console.error(`No task found with id ${c}`);d.title=e,d.category=n,d.dueDate=l,d.priority=o,d.description=s,console.log("editing task, title: "+e+" id: "+c);let i=document.getElementById(c);i.querySelector(".taskTitle").textContent=e,i.querySelector(".taskCategory").textContent=`(${n.name})`,i.querySelector(".taskDueDate").textContent=t(l),i.querySelector(".symbol").src="Highest"==o?"./images/warning-333.png":"High"==o?"./images/warning-222.png":"Medium"==o?"./images/warning-111.png":"./images/warning_grey.png",delete x.dataset.editingTaskId,a.style.display="none"}(n,d,i,r,u):function(n,l,o,s,d,i){let r=new Q(K,n,o,s,d,i);K++,o.addTaskToCat(r);let u=r.id;const m=document.createElement("div");function g(e){console.log(e),x.value=e.title,T.value=e.category.name,S.value=e.dueDate,q.value=e.priority,M.value=e.description,x.dataset.editingTaskId=e.id,a.style.display="block"}m.classList.add("taskContainerDiv"),function(n,l,o,s,a,d){const i=document.createElement("div");i.classList.add("taskBigDiv");const u=document.createElement("div");u.classList.add("taskDiv"),u.id=n,u.dataset.taskId=n,u.addEventListener("click",(function(){g(r)}));const y=document.createElement("div");y.classList.add("taskPrim"),u.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),E.classList.add("complete"),I.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),E.classList.remove("complete"),I.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=l;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+o+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const f=document.createElement("div");f.classList.add("taskSec"),u.appendChild(f);const E=document.createElement("div");E.classList.add("taskDueDate"),E.textContent=t(s);const I=document.createElement("div");I.classList.add("taskDueDate");const h=document.createElement("img");"Highest"==d.value?h.src="./images/warning-333.png":"High"==d.value?h.src="./images/warning-222.png":"Medium"==d.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),I.appendChild(h);const C=document.createElement("img");C.id=n,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),f.appendChild(E),f.appendChild(I),i.appendChild(u),i.appendChild(C);const B=document.createElement("hr");m.appendChild(i),m.appendChild(B),c.appendChild(m)}(u,n,l,s,0,q)}(n,o,d,i,r,u),a.style.display="none"}else x.classList.add("error");$=null,H=E,_($,H),N=T.value,Y(N),n(P)})),g.addEventListener("click",(function(t){t.stopPropagation();let n=x.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),x.addEventListener("input",(function(){this.classList.remove("error")}))}(),y.addEventListener("click",(function(){J="new",d.style.display="block",catTitle.value="",f.style.backgroundColor="#8a59b9",console.log(f.style.backgroundColor)})),p.addEventListener("click",(function(t){if(t.preventDefault(),"new"===J){let t=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=f.style.backgroundColor,console.log(n);let l=new O(t,n);G.push(l);let o=document.createElement("li"),s=document.createElement("button");s.innerText=t,s.id=t,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=l.catId,e(n)?(console.log(n),console.log("dark"),s.style.color="white"):(console.log(n),console.log("light"),s.style.color="black"),o.appendChild(s),document.getElementById("categoriesList").appendChild(o),W()}else if("edit"===J){console.log(R),"number"!=typeof R&&console.error("catId is not a number at [description of the code location]",R);let t=G.find((e=>e.catId===R));if(t){t.name=document.getElementById("catTitle").value,t.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${R}"]`);n&&(n.innerText=t.name,n.style.backgroundColor=t.color,e(t.color)?(n.style.color="white",w.style.color="white",console.log(w.style.color)):(n.style.color="black",w.style.color="black",console.log(w.style.color)))}else console.error("Could not find category with ID:",R);w.innerHTML=catTitle.value,console.log(v.value),w.style.backgroundColor=v.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);G.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),d.style.display="none"})),k.addEventListener("click",(function(e){e.preventDefault(),d.style.display="none"})),w.addEventListener("click",(function(){R=parseInt(this.dataset.catId),J="edit",function(e,t){let n=document.getElementById("catTitle"),l=document.getElementById("colorDisplay");n.value=e.textContent,l.style.backgroundColor=e.style.backgroundColor,d.style.display="block"}(w)})),f.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(f.style.backgroundColor);v.value=e,v.click()})),v.addEventListener("input",(function(){f.style.background=v.value})),P.classList.add("selectedFilter"),n(P),document.getElementById("allBtn").classList.add("selectedFilter"),I.addEventListener("click",(function(){$=z,H=I,_($,H),B.textContent=this.textContent})),h.addEventListener("click",(function(){const e=new Date;e.setDate(z.getDate()+7),$=e,H=h,_($,H),B.textContent=this.textContent})),C.addEventListener("click",(function(){const e=new Date;e.setDate(z.getDate()+30),$=e,H=C,_($,H),B.textContent=this.textContent})),E.addEventListener("click",(function(){$=null,H=E,_($,H),B.textContent=this.textContent})),W(),i.addEventListener("click",(function(){const e=window.getComputedStyle(s).display;window.innerWidth<750?"none"===e?(s.style.display="block",s.style.zIndex="2",o.style.gridColumn="1 / 3",o.classList.add("overlay"),i.src="./images/collapse3.png"):(s.style.display="none",s.style.zIndex="",o.style.gridColumn="1 / -1",o.classList.remove("overlay"),console.log("expand"),i.src="./images/expand3.png"):"none"===e?(s.style.display="block",s.style.zIndex="",o.style.gridColumn="2/3",o.classList.remove("overlay"),i.src="./images/collapse3.png"):(s.style.display="none",s.style.zIndex="",o.style.gridColumn="1 / -1",o.classList.remove("overlay"),console.log("expand"),i.src="./images/expand3.png")})),L.onclick=function(){a.style.display="none",delete x.dataset.editingTaskId},b.onclick=function(){d.style.display="none"},window.onclick=function(e){e.target==a?a.style.display="none":e.target==d&&(d.style.display="none")},D.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),u.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,