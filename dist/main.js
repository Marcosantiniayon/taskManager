(()=>{"use strict";function e(){const e=new Date;return e.setHours(0,0,0,0),e}function t(e){let t;return t=e.startsWith("#")?{r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)}:e,Math.round((299*t.r+587*t.g+114*t.b)/1e3)<170}function n(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function l(e){let t=window.getComputedStyle(e),n=t.backgroundColor,l=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=l}function o(){thisWeekBtn.classList.remove("selectedFilter"),thisMonthBtn.classList.remove("selectedFilter"),allBtn.classList.remove("selectedFilter"),todayBtn.classList.remove("selectedFilter")}function s(e,t,l){document.querySelectorAll(".taskContainerDiv").forEach((l=>{const o=function(e){for(const t of R){const n=t.tasks.find((t=>t.id==e));if(n)return n}return null}(l.querySelector(".taskDiv").dataset.taskId),s=new Date(n(o.dueDate));s.setHours(0,0,0,0);const a=o.category;!(null===e||s<=e)||"All Inbox"!==t&&a.name!==t?l.style.display="none":l.style.display="block"})),pageTitle.textContent=t,pageTitle.dataset.catId=l}const a=document.querySelector(".content"),d=document.querySelector("nav"),i=document.querySelector("#modal"),c=document.querySelector("#catModal"),r=document.querySelector(".tasksContainer"),u=document.getElementById("collapseBtn"),m=document.getElementById("createTask"),g=document.getElementById("okTaskBtn"),y=document.getElementById("cancelTaskBtn"),p=document.getElementById("delete"),k=document.getElementById("newCatBtn"),v=document.getElementById("okCatBtn"),E=document.getElementById("cancelCatBtn"),f=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),I=document.getElementById("colorDisplay"),h=document.getElementById("allBtn"),C=document.getElementById("todayBtn"),B=document.getElementById("thisWeekBtn"),L=document.getElementById("thisMonthBtn"),b=document.getElementById("pageTimeline");let D=document.getElementsByClassName("close")[0],w=document.getElementsByClassName("closeCatModal")[0],x=document.querySelector("form"),T=document.getElementById("pageTitle"),S=document.getElementById("title"),q=document.getElementById("category"),F=document.getElementById("dueDate"),M=document.getElementById("priority"),A=document.getElementById("description"),N=document.querySelectorAll(".catBtns"),P="All Inbox",$=document.getElementById(P),H=e();function z(){N=document.querySelectorAll(".catBtns"),N.forEach((e=>{e.addEventListener("click",(function(){N.forEach((e=>{e.classList.remove("selectedFilter")})),this.classList.add("selectedFilter"),P=this.textContent,Y=parseInt(this.dataset.catId),l(this),s(H,P,Y)}))}))}class W{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++_}addTaskToCat(e){this.tasks.push(e),e.id=j,j++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let Y,_=Math.max(...Array.from(N).map((e=>parseInt(e.dataset.catId)))),O=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>_&&(_=t),new W(e.textContent.trim(),null,t)}))}(),R=[...O],V=null,j=0;class G{constructor(e,t,n,l,o,s){this.id=e,this.title=t,this.category=n,this.dueDate=l,this.priority=o,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return i.style.display="none",void delete S.dataset.editingTaskId;let t,n,l=document.getElementById(e);if(!l)return console.error(`No task div found with id ${e}`),void delete S.dataset.editingTaskId;for(let l of R)if(t=l.tasks.find((t=>t.id==e)),t){n=l;break}n.removeTaskFromCat(e),j--,j=R.reduce(((e,t)=>e+t.tasks.length),0),l.parentNode.parentNode.remove(),i.style.display="none",delete S.dataset.editingTaskId}m.addEventListener("click",(function(){S.value="",q.value="All Inbox";let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),l=e.getFullYear();e=l+"-"+n+"-"+t,F.value=e,M.value="Low",A.value="",i.style.display="block"})),y.addEventListener("click",(function(e){e.preventDefault(),i.style.display="none"})),g.addEventListener("click",(function(t){if(document.querySelector("form").reportValidity()){t.preventDefault(),S.classList.remove("error");let l=document.getElementById("title").value,o=document.getElementById("category").value,a=document.getElementById("category").value,d=R.find((e=>e.name===a)),c=document.getElementById("dueDate").value,u=document.getElementById("priority").value,m=document.getElementById("description").value;S.dataset.editingTaskId?function(e,t,l,o,a){let d,c=S.dataset.editingTaskId;for(let e of R)if(d=e.tasks.find((e=>e.id==c)),d)break;if(void 0===d)return void console.error(`No task found with id ${c}`);d.title=e,d.category=t,d.dueDate=l,d.priority=o,d.description=a,console.log("editing task, title: "+e+" id: "+c);let r=document.getElementById(c);r.querySelector(".taskTitle").textContent=e,r.querySelector(".taskCategory").textContent=`(${t.name})`,r.querySelector(".taskDueDate").textContent=n(l),r.querySelector(".symbol").src="Highest"==o?"./images/warning-333.png":"High"==o?"./images/warning-222.png":"Medium"==o?"./images/warning-111.png":"./images/warning_grey.png",delete S.dataset.editingTaskId,i.style.display="none",s(H,P)}(l,d,c,u,m):function(t,l,o,a,d,c){let u=new G(j,t,o,a,d,c);j++,console.log(o),o.addTaskToCat(u);let m=u.id;const g=document.createElement("div");function y(e){console.log(e),S.value=e.title,q.value=e.category.name,F.value=e.dueDate,M.value=e.priority,A.value=e.description,S.dataset.editingTaskId=e.id,i.style.display="block"}g.classList.add("taskContainerDiv"),function(t,l,o,s,a,d){const i=document.createElement("div");i.classList.add("taskBigDiv");const c=document.createElement("div");c.classList.add("taskDiv"),c.id=t,c.dataset.taskId=t,c.addEventListener("click",(function(){y(u)}));const m=document.createElement("div");m.classList.add("taskPrim"),c.appendChild(m);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),f.classList.add("complete"),I.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),f.classList.remove("complete"),I.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=l;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+o+")",m.appendChild(p),m.appendChild(k),m.appendChild(v);const E=document.createElement("div");E.classList.add("taskSec"),c.appendChild(E);const f=document.createElement("div");f.classList.add("taskDueDate"),f.textContent=n(s);const I=document.createElement("div");I.classList.add("taskDueDate");const h=document.createElement("img");"Highest"==d.value?h.src="./images/warning-333.png":"High"==d.value?h.src="./images/warning-222.png":"Medium"==d.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),I.appendChild(h);const C=document.createElement("img");C.id=t,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),E.appendChild(f),E.appendChild(I),i.appendChild(c),i.appendChild(C);const B=document.createElement("hr");g.appendChild(i),g.appendChild(B),r.appendChild(g)}(m,t,l,a,0,M),s(H,P)}(l,o,d,c,u,m),i.style.display="none"}else S.classList.add("error");P=q.value,$=document.getElementById(P),console.log($),l($)})),p.addEventListener("click",(function(t){t.stopPropagation();let n=S.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),S.addEventListener("input",(function(){this.classList.remove("error")}))}(),k.addEventListener("click",(function(){V="new",c.style.display="block",catTitle.value="",I.style.backgroundColor="#8a59b9"})),v.addEventListener("click",(function(e){if(e.preventDefault(),"new"===V){let e=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value,l=new W(e,n);R.push(l);let o=document.createElement("li"),s=document.createElement("button");s.innerText=e,s.id=e,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=l.catId,t(n)?s.style.color="white":s.style.color="black",o.appendChild(s),document.getElementById("categoriesList").appendChild(o),z()}else if("edit"===V){console.log(Y),"number"!=typeof Y&&console.error("catId is not a number at [description of the code location]",Y);let e=R.find((e=>e.catId===Y));if(e){e.name=document.getElementById("catTitle").value,e.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${Y}"]`);n&&(n.innerText=e.name,n.style.backgroundColor=e.color,t(e.color)?(n.style.color="white",T.style.color="white",console.log(T.style.color)):(n.style.color="black",T.style.color="black",console.log(T.style.color)))}else console.error("Could not find category with ID:",Y);T.innerHTML=catTitle.value,console.log(f.value),T.style.backgroundColor=f.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);R.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),c.style.display="none"})),E.addEventListener("click",(function(e){e.preventDefault(),c.style.display="none"})),T.addEventListener("click",(function(){Y=parseInt(this.dataset.catId),V="edit",function(e,t){let n=document.getElementById("catTitle"),l=document.getElementById("colorDisplay");n.value=e.textContent,l.style.backgroundColor=e.style.backgroundColor,c.style.display="block"}(T)})),I.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/),n="#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2);return console.log(n),n}(I.style.backgroundColor);f.value=e,f.click()})),f.addEventListener("input",(function(){I.style.background=f.value})),$.classList.add("selectedFilter"),l($),document.getElementById("allBtn").classList.add("selectedFilter"),C.addEventListener("click",(function(){const t=e();H=t,s(H,P),o(),C.classList.add("selectedFilter"),b.textContent=this.textContent})),B.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+7),H=n,s(H,P),o(),B.classList.add("selectedFilter"),b.textContent=this.textContent})),L.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+30),H=n,s(H,P),o(),L.classList.add("selectedFilter"),b.textContent=this.textContent})),h.addEventListener("click",(function(){H=null,s(H,P),o(),h.classList.add("selectedFilter"),b.textContent=this.textContent,h.classList.add("selectedFilter")})),z(),u.addEventListener("click",(function(){const e=window.getComputedStyle(d).display;window.innerWidth<750?"none"===e?(d.style.display="block",d.style.zIndex="2",a.style.gridColumn="1 / 3",a.classList.add("overlay"),u.src="./images/collapse3.png"):(d.style.display="none",d.style.zIndex="",a.style.gridColumn="1 / -1",a.classList.remove("overlay"),console.log("expand"),u.src="./images/expand3.png"):"none"===e?(d.style.display="block",d.style.zIndex="",a.style.gridColumn="2/3",a.classList.remove("overlay"),u.src="./images/collapse3.png"):(d.style.display="none",d.style.zIndex="",a.style.gridColumn="1 / -1",a.classList.remove("overlay"),console.log("expand"),u.src="./images/expand3.png")})),D.onclick=function(){i.style.display="none",delete S.dataset.editingTaskId},w.onclick=function(){c.style.display="none"},window.onclick=function(e){e.target==i?i.style.display="none":e.target==c&&(c.style.display="none")},x.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),g.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,