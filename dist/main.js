(()=>{"use strict";function e(){const e=new Date;return e.setHours(0,0,0,0),e}function t(e){let t;if(e.startsWith("#"))t={r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16)};else if(e.startsWith("rgb(")){let n=e.substring(4,e.length-1).split(",");t={r:parseInt(n[0],10),g:parseInt(n[1],10),b:parseInt(n[2],10)}}let n=Math.round((299*t.r+587*t.g+114*t.b)/1e3);return console.log(n),n<170}function n(e){const t=new Date(e),n=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+n),`${String(t.getMonth()+1).padStart(2,"0")}/${String(t.getDate()).padStart(2,"0")}/${t.getFullYear()}`}function l(e){console.log(e),console.log(e.textContent),pageTitle.textContent=e.textContent;let t=window.getComputedStyle(e),n=t.backgroundColor,l=t.color;pageTitle.style.backgroundColor=n,pageTitle.style.color=l,console.log(e.dataset.catId),pageTitle.dataset.catId=e.dataset.catId}function o(){thisWeekBtn.classList.remove("selectedFilter"),thisMonthBtn.classList.remove("selectedFilter"),allBtn.classList.remove("selectedFilter"),todayBtn.classList.remove("selectedFilter")}const s=document.querySelector(".content"),a=document.querySelector("nav"),d=document.querySelector("#modal"),c=document.querySelector("#catModal"),i=document.querySelector(".tasksContainer"),r=document.getElementById("collapseBtn"),u=document.getElementById("createTask"),m=document.getElementById("okTaskBtn"),g=document.getElementById("cancelTaskBtn"),y=document.getElementById("delete"),p=document.getElementById("newCatBtn"),k=document.getElementById("okCatBtn"),v=document.getElementById("cancelCatBtn"),E=(document.getElementById("All Inbox"),document.getElementById("Responsibilities"),document.getElementById("Events & Social"),document.getElementById("Programming Course"),document.getElementById("colorPicker")),I=document.getElementById("colorDisplay"),f=document.getElementById("allBtn"),h=document.getElementById("todayBtn"),C=document.getElementById("thisWeekBtn"),B=document.getElementById("thisMonthBtn"),L=document.getElementById("pageTimeline");let b=document.getElementsByClassName("close")[0],w=document.getElementsByClassName("closeCatModal")[0],x=document.querySelector("form"),T=document.getElementById("pageTitle"),D=document.getElementById("title"),S=document.getElementById("category"),F=document.getElementById("dueDate"),q=document.getElementById("priority"),M=document.getElementById("description"),A=document.querySelectorAll(".catBtns"),N="All Inbox",P=document.getElementById(N),$=null;function H(){A=document.querySelectorAll(".catBtns"),A.forEach((e=>{e.addEventListener("click",(function(){N=this.textContent,Y=parseInt(this.dataset.catId),z(N)}))}))}function z(e){return A.forEach((e=>{e.classList.remove("selectedFilter")})),P=document.getElementById(e),P.classList.add("selectedFilter"),l(P),P}class W{constructor(e,t,n=null){this.name=e,this.color=t,this.tasks=[],this.catId=n||++_}addTaskToCat(e){this.tasks.push(e),e.id=j,j++}removeTaskFromCat(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}let Y,_=Math.max(...Array.from(A).map((e=>parseInt(e.dataset.catId)))),O=function(){const e=document.querySelectorAll(".categoriesDiv button");return Array.from(e).map((e=>{let t=parseInt(e.dataset.catId);return t>_&&(_=t),new W(e.textContent.trim(),null,t)}))}(),R=[...O],V=null,j=0;class G{constructor(e,t,n,l,o,s){this.id=e,this.title=t,this.category=n,this.dueDate=l,this.priority=o,this.description=s,this.complete=!1}toggleComplete(){this.complete=!this.complete}}!function(){function e(e){if(!confirm("Are you sure you want to delete this task?"))return d.style.display="none",void delete D.dataset.editingTaskId;let t,n,l=document.getElementById(e);if(!l)return console.error(`No task div found with id ${e}`),void delete D.dataset.editingTaskId;for(let l of R)if(t=l.tasks.find((t=>t.id==e)),t){n=l;break}n.removeTaskFromCat(e),j--,j=R.reduce(((e,t)=>e+t.tasks.length),0),l.parentNode.parentNode.remove(),d.style.display="none",delete D.dataset.editingTaskId}u.addEventListener("click",(function(){D.value="",S.value="All Inbox";let e=new Date,t=String(e.getDate()).padStart(2,"0"),n=String(e.getMonth()+1).padStart(2,"0"),l=e.getFullYear();e=l+"-"+n+"-"+t,F.value=e,q.value="Low",M.value="",d.style.display="block"})),g.addEventListener("click",(function(e){e.preventDefault(),d.style.display="none"})),m.addEventListener("click",(function(t){if(document.querySelector("form").reportValidity()){t.preventDefault(),D.classList.remove("error");let l=document.getElementById("title").value,o=document.getElementById("category").value,s=document.getElementById("category").value,a=R.find((e=>e.name===s)),c=document.getElementById("dueDate").value,r=document.getElementById("priority").value,u=document.getElementById("description").value;D.dataset.editingTaskId?function(e,t,l,o,s){let a,c=D.dataset.editingTaskId;for(let e of R)if(a=e.tasks.find((e=>e.id==c)),a)break;if(void 0===a)return void console.error(`No task found with id ${c}`);a.title=e,a.category=t,a.dueDate=l,a.priority=o,a.description=s,console.log("editing task, title: "+e+" id: "+c);let i=document.getElementById(c);i.querySelector(".taskTitle").textContent=e,i.querySelector(".taskCategory").textContent=`(${t.name})`,i.querySelector(".taskDueDate").textContent=n(l),i.querySelector(".symbol").src="Highest"==o?"./images/warning-333.png":"High"==o?"./images/warning-222.png":"Medium"==o?"./images/warning-111.png":"./images/warning_grey.png",delete D.dataset.editingTaskId,d.style.display="none"}(l,a,c,r,u):function(t,l,o,s,a,c){let r=new G(j,t,o,s,a,c);j++,console.log(o),o.addTaskToCat(r);let u=r.id;const m=document.createElement("div");function g(e){console.log(e),D.value=e.title,S.value=e.category.name,F.value=e.dueDate,q.value=e.priority,M.value=e.description,D.dataset.editingTaskId=e.id,d.style.display="block"}m.classList.add("taskContainerDiv"),function(t,l,o,s,a,d){const c=document.createElement("div");c.classList.add("taskBigDiv");const u=document.createElement("div");u.classList.add("taskDiv"),u.id=t,u.dataset.taskId=t,u.addEventListener("click",(function(){g(r)}));const y=document.createElement("div");y.classList.add("taskPrim"),u.appendChild(y);const p=document.createElement("input");p.type="checkbox",p.addEventListener("click",(function(e){e.stopPropagation(),this.checked?(k.classList.add("complete"),v.classList.add("complete"),I.classList.add("complete"),f.classList.add("complete")):(k.classList.remove("complete"),v.classList.remove("complete"),I.classList.remove("complete"),f.classList.remove("complete"))}));const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=l;const v=document.createElement("div");v.classList.add("taskCategory"),v.textContent="("+o+")",y.appendChild(p),y.appendChild(k),y.appendChild(v);const E=document.createElement("div");E.classList.add("taskSec"),u.appendChild(E);const I=document.createElement("div");I.classList.add("taskDueDate"),I.textContent=n(s);const f=document.createElement("div");f.classList.add("taskDueDate");const h=document.createElement("img");"Highest"==d.value?h.src="./images/warning-333.png":"High"==d.value?h.src="./images/warning-222.png":"Medium"==d.value?h.src="./images/warning-111.png":h.src="./images/warning_grey.png",h.classList.add("symbol"),f.appendChild(h);const C=document.createElement("img");C.id=t,C.src="./images/delete.png",C.classList.add("symbol"),C.addEventListener("click",(function(t){t.stopPropagation();let n=C.id;n?e(n):console.log("No task is currently being edited")})),E.appendChild(I),E.appendChild(f),c.appendChild(u),c.appendChild(C);const B=document.createElement("hr");m.appendChild(c),m.appendChild(B),i.appendChild(m)}(u,t,l,s,0,q)}(l,o,a,c,r,u),d.style.display="none"}else D.classList.add("error");N=S.value,z(N),console.log(P),l(P)})),y.addEventListener("click",(function(t){t.stopPropagation();let n=D.dataset.editingTaskId;n?e(n):console.log("No task is currently being edited")})),D.addEventListener("input",(function(){this.classList.remove("error")}))}(),p.addEventListener("click",(function(){V="new",c.style.display="block",catTitle.value="",I.style.backgroundColor="#8a59b9",console.log(I.style.backgroundColor)})),k.addEventListener("click",(function(e){if(e.preventDefault(),"new"===V){let e=document.getElementById("catTitle").value,n=document.getElementById("colorPicker").value;n=I.style.backgroundColor,console.log(n);let l=new W(e,n);R.push(l);let o=document.createElement("li"),s=document.createElement("button");s.innerText=e,s.id=e,s.classList.add("catBtns"),s.style.backgroundColor=n,s.dataset.catId=l.catId,t(n)?(console.log(n),console.log("dark"),s.style.color="white"):(console.log(n),console.log("light"),s.style.color="black"),o.appendChild(s),document.getElementById("categoriesList").appendChild(o),H()}else if("edit"===V){console.log(Y),"number"!=typeof Y&&console.error("catId is not a number at [description of the code location]",Y);let e=R.find((e=>e.catId===Y));if(e){e.name=document.getElementById("catTitle").value,e.color=document.getElementById("colorPicker").value;let n=document.querySelector(`button[data-cat-id="${Y}"]`);n&&(n.innerText=e.name,n.style.backgroundColor=e.color,t(e.color)?(n.style.color="white",T.style.color="white",console.log(T.style.color)):(n.style.color="black",T.style.color="black",console.log(T.style.color)))}else console.error("Could not find category with ID:",Y);T.innerHTML=catTitle.value,console.log(E.value),T.style.backgroundColor=E.value}!function(){let e=document.getElementById("category");for(;e.firstChild;)e.removeChild(e.firstChild);R.forEach((t=>{let n=document.createElement("option");n.value=t.name,n.textContent=t.name,e.appendChild(n)}))}(),c.style.display="none"})),v.addEventListener("click",(function(e){e.preventDefault(),c.style.display="none"})),T.addEventListener("click",(function(){Y=parseInt(this.dataset.catId),V="edit",function(e,t){let n=document.getElementById("catTitle"),l=document.getElementById("colorDisplay");n.value=e.textContent,l.style.backgroundColor=e.style.backgroundColor,c.style.display="block"}(T)})),I.addEventListener("click",(function(){let e=function(e){let t=e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);return"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2)}(I.style.backgroundColor);E.value=e,E.click()})),E.addEventListener("input",(function(){I.style.background=E.value})),P.classList.add("selectedFilter"),l(P),document.getElementById("allBtn").classList.add("selectedFilter"),h.addEventListener("click",(function(){const t=e();$=t,o(),h.classList.add("selectedFilter"),L.textContent=this.textContent})),C.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+7),$=n,o(),C.classList.add("selectedFilter"),L.textContent=this.textContent})),B.addEventListener("click",(function(){const t=e(),n=new Date;n.setDate(t.getDate()+30),$=n,o(),B.classList.add("selectedFilter"),L.textContent=this.textContent})),f.addEventListener("click",(function(){$=null,o(),f.classList.add("selectedFilter"),L.textContent=this.textContent,f.classList.add("selectedFilter")})),H(),r.addEventListener("click",(function(){const e=window.getComputedStyle(a).display;window.innerWidth<750?"none"===e?(a.style.display="block",a.style.zIndex="2",s.style.gridColumn="1 / 3",s.classList.add("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png"):"none"===e?(a.style.display="block",a.style.zIndex="",s.style.gridColumn="2/3",s.classList.remove("overlay"),r.src="./images/collapse3.png"):(a.style.display="none",a.style.zIndex="",s.style.gridColumn="1 / -1",s.classList.remove("overlay"),console.log("expand"),r.src="./images/expand3.png")})),b.onclick=function(){d.style.display="none",delete D.dataset.editingTaskId},w.onclick=function(){c.style.display="none"},window.onclick=function(e){e.target==d?d.style.display="none":e.target==c&&(c.style.display="none")},x.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),m.click())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,